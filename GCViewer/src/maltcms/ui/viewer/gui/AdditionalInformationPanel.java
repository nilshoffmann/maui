/* 
 * Maui, Maltcms User Interface. 
 * Copyright (C) 2008-2012, The authors of Maui. All rights reserved.
 *
 * Project website: http://maltcms.sf.net
 *
 * Maui may be used under the terms of either the
 *
 * GNU Lesser General Public License (LGPL)
 * http://www.gnu.org/licenses/lgpl.html
 *
 * or the
 *
 * Eclipse Public License (EPL)
 * http://www.eclipse.org/org/documents/epl-v10.php
 *
 * As a user/recipient of Maui, you may choose which license to receive the code 
 * under. Certain files or entire directories may not be covered by this 
 * dual license, but are subject to licenses compatible to both LGPL and EPL.
 * License exceptions are explicitly declared in all relevant files or in a 
 * LICENSE file in the relevant directories.
 *
 * Maui is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. Please consult the relevant license documentation
 * for details.
 */
package maltcms.ui.viewer.gui;

import cross.exception.ResourceNotAvailableException;
import java.awt.Point;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import maltcms.ui.viewer.InformationController;
import maltcms.ui.viewer.datastructures.AdditionalInformationTypes;
import maltcms.ui.viewer.tools.ChartTools;
import maltcms.ui.viewer.tools.ChromatogramVisualizerTools;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.XYPlot;

/**
 *
 * @author Mathias Wilhelm
 */
public class AdditionalInformationPanel extends PanelE {

    private ChartPositions position;
    private InformationController ic;
    private AdditionalInformationTypes currentInformation = AdditionalInformationTypes.NONE;

    /** Creates new form AdditionalInformationPanel */
    public AdditionalInformationPanel(InformationController ic, ChartPositions position) {
        this.ic = ic;
        this.position = position;
        initComponents();
    }

    public ChartPositions getChartPosition() {
        return this.position;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(this.ic.getInformation(this.position)));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jComboBox1);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
//        System.out.println("Changing Information in " + this.position);
        this.jPanel2.removeAll();
        AdditionalInformationTypes newInformation = (AdditionalInformationTypes) this.jComboBox1.getSelectedItem();
        try {
            JPanel ret = AdditionalInformationFactory.createAdditionalPanel(this.ic, newInformation);
            if (ret != null) {
                if (ret instanceof ChartPanel) {
                    this.cp = (ChartPanel) ret;
                    this.ic.changeXYPlot(this.position, (XYPlot) (this.cp).getChart().getPlot());
                } else {
                    this.cp = null;
                }
                this.jPanel2.add(ret);
            } else {
                JOptionPane.showMessageDialog(this, "Can not add null Panel to View.", "Unkown Problem.", JOptionPane.ERROR_MESSAGE);
            }
        } catch (ResourceNotAvailableException e) {
//            System.out.println("Hier muss ne errormsg kommen");
            JOptionPane.showMessageDialog(this, "Could not find required variable.", "Resource not Available.", JOptionPane.ERROR_MESSAGE);

        } finally {
            SwingUtilities.updateComponentTreeUI(this);
        }
        this.currentInformation = newInformation;
    }//GEN-LAST:event_jComboBox1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    public void changePoint(Point imagePoint) {
        int x = imagePoint.x;
        int y = imagePoint.y;
        XYPlot p = null;
        switch (this.currentInformation) {
            case HORIZONTAL_LOCAL_TIC:
                p = ChromatogramVisualizerTools.createScanlinePlot(y, true, false, this.ic.getChromatogramDescriptor());
                p = ChartTools.getPlot2(p);
                this.cp = new ChartPanel(new JFreeChart(p));
                break;
            case HORIZONTAL_LOCAL_VTIC:
                p = ChromatogramVisualizerTools.createScanlinePlot(y, true, true, this.ic.getChromatogramDescriptor());
                p = ChartTools.getPlot2(p);
                this.cp = new ChartPanel(new JFreeChart(p));
                break;
            case VERTICAL_LOCAL_TIC:
                p = ChromatogramVisualizerTools.createScanlinePlot(x, false, false, this.ic.getChromatogramDescriptor());
                p = ChartTools.getPlot3(p);
                this.cp = new ChartPanel(new JFreeChart(p));
                break;
            case VERTICAL_LOCAL_VTIC:
                p = ChromatogramVisualizerTools.createScanlinePlot(x, false, true, this.ic.getChromatogramDescriptor());
                p = ChartTools.getPlot3(p);
                this.cp = new ChartPanel(new JFreeChart(p));
                break;
            default:
                break;
        }
        if (p != null) {
            this.cp.getChart().getLegend().setVisible(true);
            this.jPanel2.removeAll();
            this.jPanel2.add(this.cp);
            this.ic.changeXYPlot(this.position, p);
            SwingUtilities.updateComponentTreeUI(this);
        }
    }
}
