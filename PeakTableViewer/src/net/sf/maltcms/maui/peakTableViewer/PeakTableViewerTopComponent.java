/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.sf.maltcms.maui.peakTableViewer;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import net.sf.maltcms.chromaui.project.api.IChromAUIProject;
import net.sf.maltcms.chromaui.project.api.descriptors.IChromatogramDescriptor;
import net.sf.maltcms.chromaui.project.api.descriptors.IPeakAnnotationDescriptor;
import org.openide.util.LookupEvent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
dtd = "-//net.sf.maltcms.maui.peakTableViewer//PeakTableViewer//EN",
autostore = false)
@TopComponent.Description(preferredID = "PeakTableViewerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window",
id = "net.sf.maltcms.maui.peakTableViewer.PeakTableViewerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_PeakTableViewerAction",
preferredID = "PeakTableViewerTopComponent")
public final class PeakTableViewerTopComponent extends TopComponent implements LookupListener {

    private Result<IChromAUIProject> result = null;
    
    public PeakTableViewerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(PeakTableViewerTopComponent.class,
                "CTL_PeakTableViewerTopComponent"));
        setToolTipText(NbBundle.getMessage(PeakTableViewerTopComponent.class,
                "HINT_PeakTableViewerTopComponent"));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(IChromAUIProject.class);
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        IChromAUIProject project = null;
        if(result.allInstances().isEmpty()) {
            return;
        }
        Iterator<? extends IChromAUIProject> iter = result.allInstances().iterator();
        if(iter.hasNext()) {
            project = iter.next();
            Collection<IChromatogramDescriptor> coll = project.getChromatograms();
            for(IChromatogramDescriptor descr: coll) {
                List<IPeakAnnotationDescriptor> peaksAnnotations = descr.getPeakAnnotationDescriptors();
                for(IPeakAnnotationDescriptor pad:peaksAnnotations) {
                    
                }
            }
        }
    }
}
