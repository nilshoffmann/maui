/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.sf.maltcms.chromaui.msviewer.api;

import cross.datastructures.fragments.IFileFragment;
import java.awt.BorderLayout;
import net.sf.maltcms.chromaui.charts.events.ChartPanelMouseListener;
import net.sf.maltcms.chromaui.msviewer.spi.MassSpectrumPanel;
import net.sf.maltcms.chromaui.project.api.IChromAUIProject;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//net.sf.maltcms.chromaui.msviewer.api//MassSpectrumViewTopComponent//EN",
autostore = false)
public final class MassSpectrumViewTopComponent extends TopComponent {

    private static MassSpectrumViewTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "MassSpectrumViewTopComponent";
    private IChromAUIProject project;

    public MassSpectrumViewTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(MassSpectrumViewTopComponent.class,
                "CTL_MassSpectrumViewTopComponent"));
        setToolTipText(NbBundle.getMessage(MassSpectrumViewTopComponent.class,
                "HINT_MassSpectrumViewTopComponent"));
    }

    public void setProject(IChromAUIProject project) {
        this.project = project;
    }

    public void setMSData(final IFileFragment f,
            final ChartPanelMouseListener cpml) {
//        MassSpectrumChartPanel mscp = new MassSpectrumChartPanel(cpml,f);
        removeAll();
        MassSpectrumPanel mscp = new MassSpectrumPanel(cpml, f, this.project);
        add(mscp, BorderLayout.CENTER);
        setDisplayName("Mass Spectrum View of " + f.getName());
        setToolTipText(f.getAbsolutePath());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }
}
