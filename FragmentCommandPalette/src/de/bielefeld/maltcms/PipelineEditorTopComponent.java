/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.bielefeld.maltcms;

import de.bielefeld.maltcms.graph.PipelineGraphScene;
import de.bielefeld.maltcms.nodes.Command;
import de.bielefeld.maltcms.nodes.CommandNode;
import de.bielefeld.maltcms.palette.CommandDragAndDropHandler;
import de.bielefeld.maltcms.palette.CommandPaletteActions;
import de.bielefeld.maltcms.palette.CommandPaletteFilter;
import de.bielefeld.maltcms.nodes.MaltcmsCommandsPaletteTree;
import de.bielefeld.maltcms.nodes.RootNode;
import de.bielefeld.maltcms.widget.CommandWidget;
import java.awt.Point;
import java.awt.datatransfer.Transferable;
import java.beans.PropertyVetoException;
import java.util.logging.Logger;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.api.visual.action.AcceptProvider;
import org.netbeans.api.visual.action.ActionFactory;
import org.netbeans.api.visual.action.ConnectProvider;
import org.netbeans.api.visual.action.ConnectorState;
import org.netbeans.api.visual.action.SelectProvider;
import org.netbeans.api.visual.anchor.AnchorFactory;
import org.netbeans.api.visual.anchor.AnchorShape;
import org.netbeans.api.visual.widget.ConnectionWidget;
import org.netbeans.api.visual.widget.LabelWidget;
import org.netbeans.api.visual.widget.LayerWidget;
import org.netbeans.api.visual.widget.Scene;
import org.netbeans.api.visual.widget.Widget;
import org.netbeans.spi.palette.PaletteController;
import org.netbeans.spi.palette.PaletteFactory;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;
import org.openide.nodes.NodeTransfer;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//de.bielefeld.maltcms//PipelineEditor//EN",
autostore = false)
public final class PipelineEditorTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static PipelineEditorTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "PipelineEditorTopComponent";
    private PaletteController palette = null;
    private ExplorerManager em = new ExplorerManager();

    public PipelineEditorTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(PipelineEditorTopComponent.class, "CTL_PipelineEditorTopComponent"));
        setToolTipText(NbBundle.getMessage(PipelineEditorTopComponent.class, "HINT_PipelineEditorTopComponent"));
        setDisplayName("PipelineEditor");
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        associateLookup(new ProxyLookup(Lookups.fixed(new Object[]{getPalette()}), ExplorerUtils.createLookup(em, getActionMap())));

        Scene scene = new PipelineGraphScene(this);

        this.jScrollPane1.setViewportView(scene.createView());
    }

    public void setSelected(Widget w) {
        try {
            CommandNode n = ((CommandWidget) w).getcNode();
            em.setRootContext(n);
            em.setSelectedNodes(new Node[]{n});
        } catch (PropertyVetoException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    private PaletteController getPalette() {
        if (null == palette) {
            RootNode paletteRoot = new RootNode(new MaltcmsCommandsPaletteTree(null));
            paletteRoot.setName("Commands");

            palette = PaletteFactory.createPalette(paletteRoot,
                    new CommandPaletteActions(), new CommandPaletteFilter(),
                    new CommandDragAndDropHandler());
        }
        return palette;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane(new BeanTreeView());
        jToolBar1 = new javax.swing.JToolBar();

        jToolBar1.setRollover(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized PipelineEditorTopComponent getDefault() {
        if (instance == null) {
            instance = new PipelineEditorTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the PipelineEditorTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized PipelineEditorTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(PipelineEditorTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof PipelineEditorTopComponent) {
            return (PipelineEditorTopComponent) win;
        }
        Logger.getLogger(PipelineEditorTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return this.em;
    }

}