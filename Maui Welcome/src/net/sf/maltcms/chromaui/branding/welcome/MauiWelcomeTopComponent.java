/*
 * Maui, Maltcms User Interface. 
 * Copyright (C) 2008-2012, The authors of Maui. All rights reserved.
 *
 * Project website: http://maltcms.sf.net
 *
 * Maui may be used under the terms of either the
 *
 * GNU Lesser General Public License (LGPL)
 * http://www.gnu.org/licenses/lgpl.html
 *
 * or the
 *
 * Eclipse Public License (EPL)
 * http://www.eclipse.org/org/documents/epl-v10.php
 *
 * As a user/recipient of Maui, you may choose which license to receive the code 
 * under. Certain files or entire directories may not be covered by this 
 * dual license, but are subject to licenses compatible to both LGPL and EPL.
 * License exceptions are explicitly declared in all relevant files or in a 
 * LICENSE file in the relevant directories.
 *
 * Maui is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. Please consult the relevant license documentation
 * for details.
 */
package net.sf.maltcms.chromaui.branding.welcome;

import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URISyntaxException;
import java.net.URL;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import org.netbeans.api.options.OptionsDisplayer;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//net.sf.maltcms.chromaui.branding.welcome//MauiWelcome//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "MauiWelcomeTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "net.sf.maltcms.chromaui.branding.welcome.MauiWelcomeTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_MauiWelcomeAction",
preferredID = "MauiWelcomeTopComponent")
@Messages({
    "CTL_MauiWelcomeAction=Welcome Center",
    "CTL_MauiWelcomeTopComponent=Welcome Center",
    "HINT_MauiWelcomeTopComponent=The Maui Welcome Center"
})
public final class MauiWelcomeTopComponent extends TopComponent implements HyperlinkListener {

    public MauiWelcomeTopComponent() {
        initComponents();
        setName(Bundle.CTL_MauiWelcomeTopComponent());
        setToolTipText(Bundle.HINT_MauiWelcomeTopComponent());
    }

    private String readText(URL u) {
        BufferedReader bis = null;
        try {
            bis = new BufferedReader(new InputStreamReader(u.openStream()));
            StringBuilder sb = new StringBuilder();
            String buffer;
            while ((buffer = bis.readLine()) != null) {
                sb.append(buffer).append("\n");
            }
            System.out.println(sb.toString());
            return sb.toString();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        } finally {
            if (bis != null) {
                try {
                    bis.close();
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        }
        return "";
    }

    private void setContent(URL u) {
        editorPane.setContentType("text/html");
        try {
            editorPane.setPage(u);
            editorPane.removeHyperlinkListener(this);
            editorPane.addHyperlinkListener(this);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        invalidate();
        validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        quantify = new javax.swing.JButton();
        searchAndIdentify = new javax.swing.JButton();
        visualize = new javax.swing.JButton();
        firstSteps = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        importPeaks = new javax.swing.JButton();
        newProject = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        customPipelines = new javax.swing.JButton();
        groovyActions = new javax.swing.JButton();
        maltcmsIntegration = new javax.swing.JButton();
        display = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        editorPane = new javax.swing.JEditorPane();

        org.openide.awt.Mnemonics.setLocalizedText(quantify, org.openide.util.NbBundle.getMessage(MauiWelcomeTopComponent.class, "MauiWelcomeTopComponent.quantify.text")); // NOI18N
        quantify.setEnabled(false);
        quantify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantifyActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(searchAndIdentify, org.openide.util.NbBundle.getMessage(MauiWelcomeTopComponent.class, "MauiWelcomeTopComponent.searchAndIdentify.text")); // NOI18N
        searchAndIdentify.setEnabled(false);
        searchAndIdentify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAndIdentifyActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(visualize, org.openide.util.NbBundle.getMessage(MauiWelcomeTopComponent.class, "MauiWelcomeTopComponent.visualize.text")); // NOI18N
        visualize.setEnabled(false);
        visualize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visualizeActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(firstSteps, org.openide.util.NbBundle.getMessage(MauiWelcomeTopComponent.class, "MauiWelcomeTopComponent.firstSteps.text")); // NOI18N
        firstSteps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstStepsActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton6, org.openide.util.NbBundle.getMessage(MauiWelcomeTopComponent.class, "MauiWelcomeTopComponent.jButton6.text")); // NOI18N
        jButton6.setEnabled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(importPeaks, org.openide.util.NbBundle.getMessage(MauiWelcomeTopComponent.class, "MauiWelcomeTopComponent.importPeaks.text")); // NOI18N
        importPeaks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importPeaksActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(newProject, org.openide.util.NbBundle.getMessage(MauiWelcomeTopComponent.class, "MauiWelcomeTopComponent.newProject.text")); // NOI18N
        newProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProjectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newProject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(firstSteps, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchAndIdentify, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(visualize, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantify, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(importPeaks, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {firstSteps, importPeaks, jButton6, newProject, quantify, searchAndIdentify, visualize});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(firstSteps)
                .addGap(18, 18, 18)
                .addComponent(newProject)
                .addGap(18, 18, 18)
                .addComponent(importPeaks)
                .addGap(18, 18, 18)
                .addComponent(visualize)
                .addGap(18, 18, 18)
                .addComponent(searchAndIdentify)
                .addGap(18, 18, 18)
                .addComponent(quantify)
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(MauiWelcomeTopComponent.class, "MauiWelcomeTopComponent.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(customPipelines, org.openide.util.NbBundle.getMessage(MauiWelcomeTopComponent.class, "MauiWelcomeTopComponent.customPipelines.text")); // NOI18N
        customPipelines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customPipelinesActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(groovyActions, org.openide.util.NbBundle.getMessage(MauiWelcomeTopComponent.class, "MauiWelcomeTopComponent.groovyActions.text")); // NOI18N
        groovyActions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groovyActionsActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(maltcmsIntegration, org.openide.util.NbBundle.getMessage(MauiWelcomeTopComponent.class, "MauiWelcomeTopComponent.maltcmsIntegration.text")); // NOI18N
        maltcmsIntegration.setEnabled(false);
        maltcmsIntegration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maltcmsIntegrationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(customPipelines, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(groovyActions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(maltcmsIntegration, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(customPipelines)
                .addGap(18, 18, 18)
                .addComponent(groovyActions)
                .addGap(18, 18, 18)
                .addComponent(maltcmsIntegration)
                .addContainerGap(204, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(MauiWelcomeTopComponent.class, "MauiWelcomeTopComponent.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        display.setLayout(new java.awt.BorderLayout());

        editorPane.setEditable(false);
        editorPane.setContentType("text/html"); // NOI18N
        jScrollPane1.setViewportView(editorPane);

        display.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(display, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane1)
                    .addComponent(display, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void firstStepsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstStepsActionPerformed
        setContent(MauiWelcomeTopComponent.class.getResource("resources/firstSteps.html"));
    }//GEN-LAST:event_firstStepsActionPerformed

    private void newProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProjectActionPerformed
        setContent(MauiWelcomeTopComponent.class.getResource("resources/newProject.html"));
    }//GEN-LAST:event_newProjectActionPerformed

    private void importPeaksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importPeaksActionPerformed
        setContent(MauiWelcomeTopComponent.class.getResource("resources/importPeaks.html"));
    }//GEN-LAST:event_importPeaksActionPerformed

    private void visualizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visualizeActionPerformed
        setContent(MauiWelcomeTopComponent.class.getResource("resources/visualize.html"));
    }//GEN-LAST:event_visualizeActionPerformed

    private void searchAndIdentifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchAndIdentifyActionPerformed
        setContent(MauiWelcomeTopComponent.class.getResource("resources/searchAndIdentify.html"));
    }//GEN-LAST:event_searchAndIdentifyActionPerformed

    private void quantifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantifyActionPerformed
        setContent(MauiWelcomeTopComponent.class.getResource("resources/quantify.html"));
    }//GEN-LAST:event_quantifyActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        setContent(MauiWelcomeTopComponent.class.getResource("resources/statistics.html"));
    }//GEN-LAST:event_jButton6ActionPerformed

    private void customPipelinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customPipelinesActionPerformed
        setContent(MauiWelcomeTopComponent.class.getResource("resources/customPipelines.html"));
    }//GEN-LAST:event_customPipelinesActionPerformed

    private void groovyActionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groovyActionsActionPerformed
        setContent(MauiWelcomeTopComponent.class.getResource("resources/groovyActions.html"));
    }//GEN-LAST:event_groovyActionsActionPerformed

    private void maltcmsIntegrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maltcmsIntegrationActionPerformed
        setContent(MauiWelcomeTopComponent.class.getResource("resources/maltcmsIntegration.html"));
    }//GEN-LAST:event_maltcmsIntegrationActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton customPipelines;
    private javax.swing.JPanel display;
    private javax.swing.JEditorPane editorPane;
    private javax.swing.JButton firstSteps;
    private javax.swing.JButton groovyActions;
    private javax.swing.JButton importPeaks;
    private javax.swing.JButton jButton6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton maltcmsIntegration;
    private javax.swing.JButton newProject;
    private javax.swing.JButton quantify;
    private javax.swing.JButton searchAndIdentify;
    private javax.swing.JButton visualize;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        setContent(MauiWelcomeTopComponent.class.getResource("resources/firstSteps.html"));
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void hyperlinkUpdate(HyperlinkEvent he) {
        URL u = he.getURL();
        if (he.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            if (u.getProtocol().equals("http") || u.getProtocol().equals("https")) {
                System.out.println(u.getPath());
                if (u.getPath().startsWith("/maui/")) {
                    String path = u.getPath().substring("/maui".length());
                    System.out.println("Path: " + path);
                    if (path.startsWith("/OptionsDialog")) {
                        String optionsPanelRegistration = path.substring("/OptionsDialog/".length());
                        System.out.println("Opening options panel: " + optionsPanelRegistration);
                        OptionsDisplayer.getDefault().open(optionsPanelRegistration);
                    } else {
                        Actions.execFileSystemAction(path, new ActionEvent(this, 1, u.getPath()));
//                        Collection<? extends Action> l = Utilities.actionsForPath(path);
//                        if (l.size() > 1) {
//                            throw new NotImplementedException("Support for multiple actions not yet implemented!");
//                        } else if (l.size() == 1) {
//                            l.iterator().next().actionPerformed(new ActionEvent(this, 1, u.getPath()));
//                        }
                    }
                } else {
                    try {
                        Desktop.getDesktop().browse(u.toURI());
                    } catch (URISyntaxException ex) {
                        Exceptions.printStackTrace(ex);
                    } catch (IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
            }
        }
    }
}
