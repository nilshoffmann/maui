/* 
 * Maui, Maltcms User Interface. 
 * Copyright (C) 2008-2012, The authors of Maui. All rights reserved.
 *
 * Project website: http://maltcms.sf.net
 *
 * Maui may be used under the terms of either the
 *
 * GNU Lesser General Public License (LGPL)
 * http://www.gnu.org/licenses/lgpl.html
 *
 * or the
 *
 * Eclipse Public License (EPL)
 * http://www.eclipse.org/org/documents/epl-v10.php
 *
 * As a user/recipient of Maui, you may choose which license to receive the code 
 * under. Certain files or entire directories may not be covered by this 
 * dual license, but are subject to licenses compatible to both LGPL and EPL.
 * License exceptions are explicitly declared in all relevant files or in a 
 * LICENSE file in the relevant directories.
 *
 * Maui is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. Please consult the relevant license documentation
 * for details.
 */
package net.sf.maltcms.chromaui.normalization.api.ui;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import net.sf.maltcms.chromaui.normalization.spi.PvalueAdjustment;
import net.sf.maltcms.chromaui.project.api.container.PeakGroupContainer;
import net.sf.maltcms.chromaui.project.api.descriptors.IPeakAnnotationDescriptor;
import net.sf.maltcms.chromaui.project.api.descriptors.IPeakGroupDescriptor;

/**
 * TODO a panel to select the peak used for normalization (by name)
 * and the external normalization method (e.g. via the normalizationDesriptor)
 * @author nilshoffmann
 */
public class NormalizationSettingsPanel extends javax.swing.JPanel {

    /** Creates new form NormalizationSettingsPanel */
    public NormalizationSettingsPanel() {
        initComponents();
    }
    private List<IPeakGroupDescriptor> peakGroups;

    public NormalizationSettingsPanel(PeakGroupContainer context) {
        this.peakGroups = new ArrayList<IPeakGroupDescriptor>();
        for (IPeakGroupDescriptor peakGroup : context.getMembers()) {
            HashSet<String> names = new HashSet<String>();
            for (IPeakAnnotationDescriptor ipad : peakGroup.
                    getPeakAnnotationDescriptors()) {
                if (!names.contains(ipad.getName())) {
                    names.add(ipad.getName());
                }
            }
            if (names.size() == 1) {
                peakGroups.add(peakGroup);
            }
        }
        initComponents();
        internalNormalizationCompound.setModel(new DefaultComboBoxModel(peakGroups.toArray()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        internalNormalizationCompound = new javax.swing.JComboBox();
        normalizeToExternalQuantity = new javax.swing.JCheckBox();

        jLabel3.setText(org.openide.util.NbBundle.getMessage(NormalizationSettingsPanel.class, "NormalizationSettingsPanel.jLabel3.text")); // NOI18N

        internalNormalizationCompound.setModel(new DefaultComboBoxModel(peakGroups.toArray()));
        internalNormalizationCompound.setRenderer(new CompoundListRenderer());

        normalizeToExternalQuantity.setSelected(true);
        normalizeToExternalQuantity.setText(org.openide.util.NbBundle.getMessage(NormalizationSettingsPanel.class, "NormalizationSettingsPanel.normalizeToExternalQuantity.text")); // NOI18N
        normalizeToExternalQuantity.setToolTipText(org.openide.util.NbBundle.getMessage(NormalizationSettingsPanel.class, "NormalizationSettingsPanel.normalizeToExternalQuantity.toolTipText")); // NOI18N
        normalizeToExternalQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeToExternalQuantityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(normalizeToExternalQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                    .addComponent(internalNormalizationCompound, javax.swing.GroupLayout.Alignment.TRAILING, 0, 239, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(normalizeToExternalQuantity)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(internalNormalizationCompound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void normalizeToExternalQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalizeToExternalQuantityActionPerformed
    }    
        // TODO add your handling code here:}//GEN-LAST:event_normalizeToExternalQuantityActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox internalNormalizationCompound;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JCheckBox normalizeToExternalQuantity;
    // End of variables declaration//GEN-END:variables

    public IPeakGroupDescriptor getInternalNormalizationGroup() {
        return (IPeakGroupDescriptor) internalNormalizationCompound.
                getSelectedItem();
    }
    
    public boolean isNormalizeToExternalQuantity() {
        return normalizeToExternalQuantity.isSelected();
    }
}
