/* 
 * Maui, Maltcms User Interface. 
 * Copyright (C) 2008-2012, The authors of Maui. All rights reserved.
 *
 * Project website: http://maltcms.sf.net
 *
 * Maui may be used under the terms of either the
 *
 * GNU Lesser General Public License (LGPL)
 * http://www.gnu.org/licenses/lgpl.html
 *
 * or the
 *
 * Eclipse Public License (EPL)
 * http://www.eclipse.org/org/documents/epl-v10.php
 *
 * As a user/recipient of Maui, you may choose which license to receive the code 
 * under. Certain files or entire directories may not be covered by this 
 * dual license, but are subject to licenses compatible to both LGPL and EPL.
 * License exceptions are explicitly declared in all relevant files or in a 
 * LICENSE file in the relevant directories.
 *
 * Maui is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. Please consult the relevant license documentation
 * for details.
 */
package net.sf.maltcms.maui.heatmapViewer;

import java.awt.BasicStroke;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.RepaintManager;
import javax.swing.SwingUtilities;
import net.sf.maltcms.chromaui.ui.support.api.AProgressAwareRunnable;
import net.sf.maltcms.maui.heatmapViewer.chart.controllers.LabeledMouseSelector;
import net.sf.maltcms.maui.heatmapViewer.plot3d.builder.concrete.BufferedImageMapper;
import net.sf.maltcms.maui.heatmapViewer.plot3d.builder.concrete.SurfaceFactory;
import net.sf.maltcms.maui.heatmapViewer.plot3d.builder.concrete.ViewportMapper;
import org.jzy3d.chart.Chart;
import org.jzy3d.chart.controllers.ControllerType;
import org.jzy3d.chart.controllers.mouse.ChartMouseController;
import org.jzy3d.demos.histogram.barchart.BarChartBar;
import org.jzy3d.events.ControllerEvent;
import org.jzy3d.events.ControllerEventListener;
import org.jzy3d.maths.Coord3d;
import org.jzy3d.maths.IntegerCoord2d;
import org.jzy3d.plot3d.primitives.AbstractDrawable;
import org.jzy3d.plot3d.primitives.CompileableComposite;
import org.jzy3d.plot3d.rendering.canvas.Quality;
import org.jzy3d.plot3d.rendering.scene.Graph;
import org.jzy3d.plot3d.rendering.tooltips.ITooltipRenderer;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//net.sf.maltcms.maui.heatmapViewer//HeatmapViewer//EN",
autostore = false)
@TopComponent.Description(preferredID = "HeatmapViewerTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "net.sf.maltcms.maui.heatmapViewer.HeatmapViewerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_HeatmapViewerAction",
preferredID = "HeatmapViewerTopComponent")
public final class HeatmapViewerTopComponent extends TopComponent {

    private Chart chart = null;
    private AbstractDrawable cc;
    private List<BarChartBar<String>> barChartBars = new ArrayList<BarChartBar<String>>();
    private ViewportMapper mapper = null;
    private List<Coord3d> coords = null;
    private Rectangle2D roi;
    private int sampling = 1;

    public HeatmapViewerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(HeatmapViewerTopComponent.class, "CTL_HeatmapViewerTopComponent"));
        setToolTipText(NbBundle.getMessage(HeatmapViewerTopComponent.class, "HINT_HeatmapViewerTopComponent"));
        jTextField1.setText(sampling + "");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(HeatmapViewerTopComponent.class, "HeatmapViewerTopComponent.jButton1.text")); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(HeatmapViewerTopComponent.class, "HeatmapViewerTopComponent.jButton2.text")); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jTextField1.setEditable(false);
        jTextField1.setColumns(4);
        jTextField1.setText(org.openide.util.NbBundle.getMessage(HeatmapViewerTopComponent.class, "HeatmapViewerTopComponent.jTextField1.text")); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jTextField1);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int old = sampling;
        sampling = Math.max(1, --sampling);
        if (sampling != old) {
            jButton1.setEnabled(false);
            jTextField1.setText(sampling + "");
            buildScene();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int old = sampling;
        sampling = Math.min(10, ++sampling);
        if (sampling != old) {
            jButton2.setEnabled(false);
            jTextField1.setText(sampling + "");
            buildScene();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        buildScene();
    }

    public void setMapper(ViewportMapper mapper, Rectangle2D roi, List<Coord3d> coords) {
        this.mapper = mapper;
        this.roi = roi;
        this.coords = coords;
    }

    private class SceneUpdater extends AProgressAwareRunnable {

        private final Graph graph;

        public SceneUpdater(Graph graph) {
            this.graph = graph;
        }

        @Override
        public void run() {
            try {
                setEnabled(false);
                progressHandle.start();
                progressHandle.progress("Removing old scene elements");
                synchronized (graph) {
                    if (cc != null) {
                        graph.remove(cc, false);
                    }
                    for (BarChartBar<String> bcb : barChartBars) {
                        graph.remove(bcb, false);
                    }
                    SurfaceFactory sf = new SurfaceFactory();
//        ViewportMapper mapper = null;

                    progressHandle.progress("Building surface");
                    boolean fastTesselation = true;
//                    if(coords==null) {
                        cc = sf.createSurface(mapper.getClippedViewport(roi), mapper,
                            fastTesselation, (int) (roi.getWidth() / sampling), (int) (roi.getHeight() / sampling));
//                    }else{
//                        //use delaunay builder
//                        cc = sf.createDelaunaySurface(coords);
//                    }
                    progressHandle.progress("Adding to scene");
                    System.out.println("Adding surface to scene graph");
                    graph.add(cc);
                }

//            for (int i = 0; i < 10; i++) {
//                int xpos = (int) (roi.getX() + (double) (Math.random() * (roi.getWidth())));
//                int ypos = (int) (roi.getY() + (double) (Math.random() * (roi.getHeight())));
//                String item = xpos + " " + ypos;
//                BarChartBar<String> bcb = new BarChartBar<String>(chart, item,
//                        item);
//                bcb.setData(new Coord3d(xpos, ypos,
//                        cc.getBounds().getZmin()), 10.0f, 10.0f, (float) mapper.f(xpos,
//                        ypos) - cc.getBounds().getZmin(),
//                        new Color((float) Math.random(), (float) Math.random(),
//                        (float) Math.random(), 0.3f));
//                chart.getScene().getGraph().add(bcb);
//                barChartBars.add(bcb);
//            }
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        setEnabled(true);
                        chart.getCanvas().forceRepaint();
                        progressHandle.progress("Done!");
                        jButton1.setEnabled(true);
                        jButton2.setEnabled(true);
                    }
                });

            } finally {
                progressHandle.finish();
            }
        }
    }

    private void addComposite(Graph graph) {
        SceneUpdater su = new SceneUpdater(graph);
        SceneUpdater.createAndRun("Scene Updater", su);
    }

    private Chart getChart() {
        if (chart == null) {
            chart = new Chart(Quality.Intermediate, "swing");
            LabeledMouseSelector lms = new LabeledMouseSelector(chart);
            chart.getCanvas().addKeyListener(lms);

            chart.getAxeLayout().setXAxeLabel("Retention Time 1");
            chart.getAxeLayout().setYAxeLabel("Retention Time 2");
            chart.getAxeLayout().setZAxeLabel("Total Intensity");
            //cc.setLegend(new ColorbarLegend(cc, chart.getView().getAxe().getLayout()));
            //cc.setLegendDisplayed(true);
            chart.getView().addTooltip(new ITooltipRenderer() {
                private IntegerCoord2d currentPosition = null;

                public void render(Graphics2D g2d) {
//                    Graphics2D g2d = (Graphics2D) g;
                    if (currentPosition != null) {
                        g2d.setStroke(new BasicStroke(4.0f));
                        g2d.setColor(java.awt.Color.BLACK);
                        g2d.drawRect(currentPosition.x, currentPosition.y, 100,
                                100);
                    }
                }

                public void updateScreenPosition(IntegerCoord2d position) {
                    this.currentPosition = position;
                }
            });
//            chart.getView().getTooltips();
//            chart.getView().setViewPositionMode(ViewPositionMode.TOP);
//            chart.getView().setAxeBoxDisplayed(false);
            chart.getView().setMaximized(true);
            chart.getView().getCamera().setScreenGridDisplayed(false);
//            chart.getView().setSquared(false);
//            chart.addRenderer(new Renderer2d() {
//
//                public void paint(Graphics g) {
//                    Graphics2D g2d = (Graphics2D) g;
//                    g2d.setStroke(new BasicStroke(4.0f));
//                    g2d.setColor(java.awt.Color.BLACK);
//                    g2d.drawRect(10, 50, 100, 100);
//
//                }
//            });
            ChartMouseController mouse = new ChartMouseController();
            chart.addController(mouse);
            mouse.addControllerEventListener(new ControllerEventListener() {
                public void controllerEventFired(ControllerEvent e) {
                    if (e.getType() == ControllerType.PAN) {
                        System.out.println("Mouse[PAN]: " + e.getValue());

                    } else if (e.getType() == ControllerType.SHIFT) {
                        System.out.println("Mouse[SHIFT]: " + e.getValue());
                    } else if (e.getType() == ControllerType.ZOOM) {
                        System.out.println("Mouse[ZOOM]: " + e.getValue());
                    } else if (e.getType() == ControllerType.ROTATE) {
                        System.out.println("Mouse[ROTATE]:" + e.getValue());
                    }
                }
            });
            add((java.awt.Component) chart.getCanvas());
        }
        return chart;
    }

    private void buildScene() {
        if (mapper == null && roi == null) {
            BufferedImage bi;
            try {
                bi = ImageIO.read(HeatmapViewer.class.getClassLoader().getResourceAsStream(
                        "net/sf/maltcms/maui/heatmapViewer/chromatogram.png"));
                mapper = new BufferedImageMapper(bi);
                //select a smaller rectangle, if the complete image is too large
                //Rectangle roi = new Rectangle(200, 200, 300, 300);
                //                roi = new Rectangle(200, 200, 300, 300);
                roi = new Rectangle(0, 0, bi.getWidth(), bi.getHeight());
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
//        if(cc==null) {
//        SwingUtilities.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                setEnabled(false);
        addComposite(getChart().getScene().getGraph());
//                setEnabled(true);
////                requestActive();
//            }
//        });
    }

    @Override
    public void componentClosed() {
        super.componentClosed();
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected void componentActivated() {
        super.componentActivated();
//        buildScene();
    }

    @Override
    protected void componentDeactivated() {
        super.componentDeactivated();
//        buildScene();
    }

    @Override
    protected void componentHidden() {
        super.componentHidden();
//        buildScene();
    }

    @Override
    protected void componentShowing() {
        super.componentShowing();
//        buildScene();
    }

    @Override
    public void validate() {
        super.validate();
//        buildScene();
    }
}
