/* 
 * Maui, Maltcms User Interface. 
 * Copyright (C) 2008-2012, The authors of Maui. All rights reserved.
 *
 * Project website: http://maltcms.sf.net
 *
 * Maui may be used under the terms of either the
 *
 * GNU Lesser General Public License (LGPL)
 * http://www.gnu.org/licenses/lgpl.html
 *
 * or the
 *
 * Eclipse Public License (EPL)
 * http://www.eclipse.org/org/documents/epl-v10.php
 *
 * As a user/recipient of Maui, you may choose which license to receive the code 
 * under. Certain files or entire directories may not be covered by this 
 * dual license, but are subject to licenses compatible to both LGPL and EPL.
 * License exceptions are explicitly declared in all relevant files or in a 
 * LICENSE file in the relevant directories.
 *
 * Maui is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. Please consult the relevant license documentation
 * for details.
 */
package net.sf.maltcms.db.search.api.ui;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import net.sf.maltcms.chromaui.project.api.types.DatabaseType;

/**
 * TODO link with project so that dbs are stored and retrieved.
 * @author nilshoffmann
 */
public class DatabaseDefinitionPanel extends javax.swing.JPanel {

//    private HashSet<IDatabaseDescriptor> databaseFiles = new LinkedHashSet<IDatabaseDescriptor>();
    private DefaultListModel listModel;
    private DefaultComboBoxModel comboBoxModel;

    /** Creates new form DatabaseDefinitionPanel */
    public DatabaseDefinitionPanel() {
        initComponents();

        listModel = new DefaultListModel();
//        if (project != null) {
//            Collection<DatabaseContainer> databases = project.getContainer(
//                    DatabaseContainer.class);
//            for (DatabaseContainer container : databases) {
//                for (IDatabaseDescriptor descr : container.get()) {
//                    listModel.addElement(descr);
//                }
//            }
//        }

        jList1.setModel(listModel);
        comboBoxModel = new DefaultComboBoxModel(DatabaseType.values());
        jComboBox1.setModel(comboBoxModel);
        jComboBox1.setSelectedIndex(DatabaseType.USER.ordinal());
    }

    public List<File> getDatabases() {
        Object[] descriptors = listModel.toArray();
        List<File> list = new ArrayList<File>();
        for (Object obj : descriptors) {
            list.add((File) obj);
        }
        return list;
    }
    
    public List<Double> getMaskedMasses() {
        String text = maskedMasses.getText();
        if(text.isEmpty()) {
            return Collections.emptyList();
        }
        String[] values = text.split(",");
        List<Double> list = new ArrayList<Double>();
        for(String str:values) {
            list.add(Double.parseDouble(str));
        }
        return list;
    }
    
    public DatabaseType getDatabaseType() {
        return (DatabaseType)jComboBox1.getSelectedItem();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        addDatabase = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        removeDatabase = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        databaseContainerName = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        localeComboBox = new javax.swing.JComboBox();
        maskedMasses = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.jLabel1.text")); // NOI18N

        addDatabase.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.addDatabase.text")); // NOI18N
        addDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDatabaseActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        removeDatabase.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.removeDatabase.text")); // NOI18N
        removeDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDatabaseActionPerformed(evt);
            }
        });

        jLabel2.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.jLabel2.text")); // NOI18N

        databaseContainerName.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.databaseContainerName.text")); // NOI18N
        databaseContainerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseContainerNameActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel3.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.jLabel3.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.jLabel4.text")); // NOI18N

        localeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "US", "GERMAN" }));
        localeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localeComboBoxActionPerformed(evt);
            }
        });

        maskedMasses.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.maskedMasses.text")); // NOI18N
        maskedMasses.setToolTipText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.maskedMasses.toolTipText")); // NOI18N
        maskedMasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maskedMassesActionPerformed(evt);
            }
        });

        jLabel5.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.jLabel5.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(databaseContainerName, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(localeComboBox, 0, 238, Short.MAX_VALUE)
                            .addComponent(jComboBox1, 0, 238, Short.MAX_VALUE)
                            .addComponent(maskedMasses, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .addComponent(removeDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(databaseContainerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addDatabase)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeDatabase))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(localeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maskedMasses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDatabaseActionPerformed
        JFileChooser jfc = new JFileChooser();
        FileFilter fileFilter = new FileFilter() {

            @Override
            public boolean accept(File file) {
                if (file.isDirectory()) {
                    return true;
                }
                if (file.getName().toLowerCase().endsWith("db4o") || file.
                        getName().toLowerCase().endsWith("msp")) {
                    return true;
                }
                return false;
            }

            @Override
            public String getDescription() {
                return ".db4o,.msp";
            }
        };
        jfc.setFileFilter(fileFilter);
        jfc.setMultiSelectionEnabled(true);
        int result = jfc.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File[] selectedDatabases = jfc.getSelectedFiles();
            for (File file : selectedDatabases) {
                listModel.addElement(file);
            }
        }
    }//GEN-LAST:event_addDatabaseActionPerformed

    public Locale getSelectedLocale() {
        String value = (String)localeComboBox.getSelectedItem();
        if(value.equals("US")) {
            return Locale.US;
        }else if(value.equals("GERMAN")) {
            return Locale.GERMAN;
        }
        return Locale.US;
    }
    
    public String getDatabaseContainerName() {
        return this.databaseContainerName.getText();
    }

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
    }//GEN-LAST:event_jList1ValueChanged

    private void databaseContainerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseContainerNameActionPerformed
    }//GEN-LAST:event_databaseContainerNameActionPerformed

    private void removeDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDatabaseActionPerformed
        Object[] values = jList1.getSelectedValues();
        for(Object obj:values) {
            listModel.removeElement(obj);
        }
    }//GEN-LAST:event_removeDatabaseActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void localeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_localeComboBoxActionPerformed

    private void maskedMassesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maskedMassesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maskedMassesActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDatabase;
    private javax.swing.JTextField databaseContainerName;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox localeComboBox;
    private javax.swing.JTextField maskedMasses;
    private javax.swing.JButton removeDatabase;
    // End of variables declaration//GEN-END:variables
}
