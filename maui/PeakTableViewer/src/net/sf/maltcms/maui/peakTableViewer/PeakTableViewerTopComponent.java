/* 
 * Maui, Maltcms User Interface. 
 * Copyright (C) 2008-2012, The authors of Maui. All rights reserved.
 *
 * Project website: http://maltcms.sf.net
 *
 * Maui may be used under the terms of either the
 *
 * GNU Lesser General Public License (LGPL)
 * http://www.gnu.org/licenses/lgpl.html
 *
 * or the
 *
 * Eclipse Public License (EPL)
 * http://www.eclipse.org/org/documents/epl-v10.php
 *
 * As a user/recipient of Maui, you may choose which license to receive the code 
 * under. Certain files or entire directories may not be covered by this 
 * dual license, but are subject to licenses compatible to both LGPL and EPL.
 * License exceptions are explicitly declared in all relevant files or in a 
 * LICENSE file in the relevant directories.
 *
 * Maui is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. Please consult the relevant license documentation
 * for details.
 */
package net.sf.maltcms.maui.peakTableViewer;

import java.awt.BorderLayout;
import java.util.Iterator;
import javax.swing.ActionMap;
import net.sf.maltcms.chromaui.project.api.IChromAUIProject;
import net.sf.maltcms.chromaui.project.api.descriptors.IPeakGroupDescriptor;
import net.sf.maltcms.maui.peakTableViewer.spi.nodes.PeakGroupDescriptorChildFactory;
import org.openide.util.LookupEvent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.OutlineView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.Lookup.Result;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//net.sf.maltcms.maui.peakTableViewer//PeakTableViewer//EN",
		autostore = false)
@TopComponent.Description(preferredID = "PeakTableViewerTopComponent",
		//iconBase="SET/PATH/TO/ICON/HERE", 
		persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window",
		id = "net.sf.maltcms.maui.peakTableViewer.PeakTableViewerTopComponent")
@ActionReference(path = "Menu/Window" /*
		 * , position = 333
		 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_PeakTableViewerAction",
		preferredID = "PeakTableViewerTopComponent")
public final class PeakTableViewerTopComponent extends TopComponent implements
		LookupListener, ExplorerManager.Provider, Lookup.Provider {

	private Result<IPeakGroupDescriptor> result = null;
	private ExplorerManager manager = new ExplorerManager();
	private OutlineView view = null;
	private IChromAUIProject activeProject = null;
	private IPeakGroupDescriptor peakGroupDescriptor = null;

	public PeakTableViewerTopComponent() {
		initComponents();
		view = new OutlineView("Peaks of Peak Group");
		view.setTreeSortable(true);
        view.setPropertyColumns("shortDescription", "Short Description", "area", "Area");
		view.getOutline().setRootVisible(false);
		add(view, BorderLayout.CENTER);
		setName(NbBundle.getMessage(PeakTableViewerTopComponent.class,
				"CTL_PeakTableViewerTopComponent"));
		setToolTipText(NbBundle.getMessage(PeakTableViewerTopComponent.class,
				"HINT_PeakTableViewerTopComponent"));

		ActionMap map = this.getActionMap();
//        map.put(DefaultEditorKit.copyAction, ExplorerUtils.actionCopy(manager));
//        map.put(DefaultEditorKit.cutAction, ExplorerUtils.actionCut(manager));
//        map.put(DefaultEditorKit.pasteAction, ExplorerUtils.actionPaste(manager));
		map.put("delete", ExplorerUtils.actionDelete(manager, true)); // or false
		associateLookup(ExplorerUtils.createLookup(manager, map));
	}

	@Override
	public boolean requestFocusInWindow() {
		return view.requestFocusInWindow();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
	// It is good idea to switch all listeners on and off when the
	// component is shown or hidden. In the case of TopComponent use:
	@Override
	protected void componentActivated() {
		ExplorerUtils.activateActions(manager, true);
		view.requestFocusInWindow();
	}

	@Override
	protected void componentDeactivated() {
		ExplorerUtils.activateActions(manager, false);
	}

	@Override
	public void componentOpened() {
		result = Utilities.actionsGlobalContext().lookupResult(
				IPeakGroupDescriptor.class);
		result.addLookupListener(this);
		resultChanged(new LookupEvent(result));
	}

	@Override
	public void componentClosed() {
		result.removeLookupListener(this);
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
	}

	void readProperties(java.util.Properties p) {
		String version = p.getProperty("version");
	}

	@Override
	public void resultChanged(LookupEvent ev) {
		if (result == null || result.allInstances().isEmpty()) {
			return;
		}
		if (!isShowing()) {
			return;
		}
		activeProject = Utilities.actionsGlobalContext().lookup(
				IChromAUIProject.class);
		if (activeProject == null) {
			throw new NullPointerException(
					"No instance of IChromAUI project in lookup!");
		}
		Iterator<? extends IPeakGroupDescriptor> iter = result.allInstances().
				iterator();
		if (ev.getSource() == this) {
			throw new IllegalStateException();
		}
		if (iter.hasNext()) {
			IPeakGroupDescriptor newPeakGroupDescriptor = (IPeakGroupDescriptor) iter.next();
			if(newPeakGroupDescriptor!=peakGroupDescriptor) {
				peakGroupDescriptor = newPeakGroupDescriptor;
				setDisplayName("Peaks for " + activeProject.getLocation().getName() + " - " + peakGroupDescriptor.getName());
				System.out.println("Setting node factory");
				final Lookup lkp = new ProxyLookup(Lookups.fixed(peakGroupDescriptor), activeProject.getLookup());
				PeakGroupDescriptorChildFactory childFactory = new PeakGroupDescriptorChildFactory(lkp, peakGroupDescriptor);
				Node rootNode = new AbstractNode(Children.create(childFactory, true), lkp);
				System.out.println("Setting root context");
				manager.setRootContext(rootNode);
			}
		}else{
			manager.setRootContext(Node.EMPTY);
		}
	}

	@Override
	public ExplorerManager getExplorerManager() {
		return manager;
	}
}
