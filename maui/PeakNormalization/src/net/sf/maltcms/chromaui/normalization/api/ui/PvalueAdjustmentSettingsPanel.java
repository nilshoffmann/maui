/* 
 * Maui, Maltcms User Interface. 
 * Copyright (C) 2008-2014, The authors of Maui. All rights reserved.
 *
 * Project website: http://maltcms.sf.net
 *
 * Maui may be used under the terms of either the
 *
 * GNU Lesser General Public License (LGPL)
 * http://www.gnu.org/licenses/lgpl.html
 *
 * or the
 *
 * Eclipse Public License (EPL)
 * http://www.eclipse.org/org/documents/epl-v10.php
 *
 * As a user/recipient of Maui, you may choose which license to receive the code 
 * under. Certain files or entire directories may not be covered by this 
 * dual license, but are subject to licenses compatible to both LGPL and EPL.
 * License exceptions are explicitly declared in all relevant files or in a 
 * LICENSE file in the relevant directories.
 *
 * Maui is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. Please consult the relevant license documentation
 * for details.
 */
package net.sf.maltcms.chromaui.normalization.api.ui;

import javax.swing.DefaultComboBoxModel;
import net.sf.maltcms.chromaui.normalization.spi.PvalueAdjustment;
import net.sf.maltcms.chromaui.project.api.IChromAUIProject;
import org.openide.util.NbPreferences;

/**
 * TODO a panel to select the peak used for normalization (by name)
 * and the external normalization method (e.g. via the normalizationDesriptor)
 * @author nilshoffmann
 */
public class PvalueAdjustmentSettingsPanel extends javax.swing.JPanel {

	private PvalueAdjustment previousAdjustmentMethod = PvalueAdjustment.BH;
	private IChromAUIProject project;
	
    /** Creates new form NormalizationSettingsPanel */
    public PvalueAdjustmentSettingsPanel(IChromAUIProject project) {
		this.project = project;
        initComponents();
		previousAdjustmentMethod = PvalueAdjustment.valueOf(NbPreferences.forModule(NormalizationSettingsPanel.class).node(project.getLocation().getName()).get("pValueAdjustmentMethod", "BH"));
		pvalueAdjustmentMethod.setSelectedItem(previousAdjustmentMethod);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pvalueAdjustmentMethod = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        pvalueAdjustmentMethod.setModel(new DefaultComboBoxModel(PvalueAdjustment.values()));
        pvalueAdjustmentMethod.setRenderer(new PvalueAdjustmentRenderer());
        pvalueAdjustmentMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pvalueAdjustmentMethodActionPerformed(evt);
            }
        });

        jLabel1.setText(org.openide.util.NbBundle.getMessage(PvalueAdjustmentSettingsPanel.class, "PvalueAdjustmentSettingsPanel.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pvalueAdjustmentMethod, 0, 239, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pvalueAdjustmentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void pvalueAdjustmentMethodActionPerformed(//GEN-FIRST:event_pvalueAdjustmentMethodActionPerformed
            java.awt.event.ActionEvent evt) {//GEN-HEADEREND:event_pvalueAdjustmentMethodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pvalueAdjustmentMethodActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox pvalueAdjustmentMethod;
    // End of variables declaration//GEN-END:variables

    public PvalueAdjustment getPvalueAdjustment() {
        if (pvalueAdjustmentMethod.getSelectedItem() != null) {
			PvalueAdjustment adjustment = (PvalueAdjustment) pvalueAdjustmentMethod.getSelectedItem();
			NbPreferences.forModule(NormalizationSettingsPanel.class).node(project.getLocation().getName()).put("pValueAdjustmentMethod", adjustment.toString());
            return adjustment;
        }
        return PvalueAdjustment.none;
    }
}
