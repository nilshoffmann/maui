/* 
 * Maui, Maltcms User Interface. 
 * Copyright (C) 2008-2014, The authors of Maui. All rights reserved.
 *
 * Project website: http://maltcms.sf.net
 *
 * Maui may be used under the terms of either the
 *
 * GNU Lesser General Public License (LGPL)
 * http://www.gnu.org/licenses/lgpl.html
 *
 * or the
 *
 * Eclipse Public License (EPL)
 * http://www.eclipse.org/org/documents/epl-v10.php
 *
 * As a user/recipient of Maui, you may choose which license to receive the code 
 * under. Certain files or entire directories may not be covered by this 
 * dual license, but are subject to licenses compatible to both LGPL and EPL.
 * License exceptions are explicitly declared in all relevant files or in a 
 * LICENSE file in the relevant directories.
 *
 * Maui is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. Please consult the relevant license documentation
 * for details.
 */
package net.sf.maltcms.chromaui.project.spi.wizard;

import java.awt.Component;
import java.io.File;
import java.util.Enumeration;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import net.sf.maltcms.chromaui.project.api.types.GCGC;
import net.sf.maltcms.chromaui.project.api.types.IDetectorType;
import net.sf.maltcms.chromaui.project.api.types.ISeparationType;
import net.sf.maltcms.chromaui.project.api.types.LCLC;
import net.sf.maltcms.chromaui.project.api.types.TypeFactory;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.util.NbBundle;

public class DBProjectVisualPanel2 extends JPanel implements IWizardValidatable {

    public static final String PROP_PROJECT_NAME = "projectName";
    private Map<File, String> fileToTreatmentGroup = new LinkedHashMap<File, String>();
    private Map<File, String> fileToSampleGroup = new LinkedHashMap<File, String>();

    public DBProjectVisualPanel2() {
        initComponents();
        setName(NbBundle.getMessage(DBProjectVisualPanel2.class, "LBL_CreateProjectStep"));
        separationTypeComboBoxActionPerformed(null);
//        this.panel = panel;
        // Register listener on the textFields to make the automatic updates
//        projectNameTextField.getDocument().addDocumentListener(this);
//        projectLocationTextField.getDocument().addDocumentListener(this);
//        outputFolder.getDocument().addDocumentListener(this);
    }

//    public String getProjectName() {
////        return this.projectNameTextField.getText();
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        assignGroupToFile = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        modulationTimeLabel = new javax.swing.JLabel();
        modulationTimeTextField = new javax.swing.JTextField();
        separationTypeComboBox = new javax.swing.JComboBox();
        detectorTypeComboBox = new javax.swing.JComboBox();
        scanRateTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        treatmentGroupPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        groupList = new javax.swing.JList();
        groupTextField = new javax.swing.JTextField();
        addTreatmentGroupButton = new javax.swing.JButton();
        removeTreatmentGroupButton = new javax.swing.JButton();
        sampleGroupPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        sampleGroupList = new javax.swing.JList();
        sampleGroupTextField = new javax.swing.JTextField();
        addSampleGroupButton = new javax.swing.JButton();
        removeSampleGroupButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileToGroupList = new javax.swing.JList();

        setPreferredSize(new java.awt.Dimension(640, 480));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(assignGroupToFile, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.assignGroupToFile.text")); // NOI18N
        assignGroupToFile.setToolTipText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.assignGroupToFile.toolTipText")); // NOI18N
        assignGroupToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignGroupToFileActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.jPanel1.border.title"))); // NOI18N

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.jLabel3.text")); // NOI18N
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.jLabel4.text")); // NOI18N
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        modulationTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(modulationTimeLabel, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.modulationTimeLabel.text")); // NOI18N

        modulationTimeTextField.setText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.modulationTimeTextField.text")); // NOI18N
        modulationTimeTextField.setToolTipText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.modulationTimeTextField.toolTipText")); // NOI18N
        modulationTimeTextField.setEnabled(false);

        separationTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(getSeparationTypes()));
        separationTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                separationTypeComboBoxActionPerformed(evt);
            }
        });

        detectorTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(getDetectorTypes()));
        detectorTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detectorTypeComboBoxActionPerformed(evt);
            }
        });

        scanRateTextField.setText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.scanRateTextField.text")); // NOI18N
        scanRateTextField.setToolTipText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.scanRateTextField.toolTipText")); // NOI18N
        scanRateTextField.setEnabled(false);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.jCheckBox1.text")); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.jLabel6.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(modulationTimeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(modulationTimeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                    .addComponent(scanRateTextField))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(detectorTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(separationTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(detectorTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(separationTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modulationTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modulationTimeLabel)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scanRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addContainerGap())
        );

        treatmentGroupPanel.setName("treatmentGroupPanel"); // NOI18N

        groupList.setModel(getTreatmentGroupListModel());
        groupList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        groupList.setToolTipText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.groupList.toolTipText")); // NOI18N
        jScrollPane1.setViewportView(groupList);

        groupTextField.setText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.groupTextField.text")); // NOI18N
        groupTextField.setToolTipText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.groupTextField.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(addTreatmentGroupButton, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.addTreatmentGroupButton.text")); // NOI18N
        addTreatmentGroupButton.setMaximumSize(new java.awt.Dimension(40, 29));
        addTreatmentGroupButton.setMinimumSize(new java.awt.Dimension(40, 29));
        addTreatmentGroupButton.setPreferredSize(new java.awt.Dimension(40, 29));
        addTreatmentGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTreatmentGroupButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeTreatmentGroupButton, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.removeTreatmentGroupButton.text")); // NOI18N
        removeTreatmentGroupButton.setMaximumSize(new java.awt.Dimension(70, 29));
        removeTreatmentGroupButton.setMinimumSize(new java.awt.Dimension(70, 29));
        removeTreatmentGroupButton.setPreferredSize(new java.awt.Dimension(70, 29));
        removeTreatmentGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTreatmentGroupButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout treatmentGroupPanelLayout = new javax.swing.GroupLayout(treatmentGroupPanel);
        treatmentGroupPanel.setLayout(treatmentGroupPanelLayout);
        treatmentGroupPanelLayout.setHorizontalGroup(
            treatmentGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treatmentGroupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(treatmentGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                    .addGroup(treatmentGroupPanelLayout.createSequentialGroup()
                        .addComponent(addTreatmentGroupButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeTreatmentGroupButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(groupTextField))
                .addContainerGap())
        );

        treatmentGroupPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addTreatmentGroupButton, removeTreatmentGroupButton});

        treatmentGroupPanelLayout.setVerticalGroup(
            treatmentGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(treatmentGroupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(groupTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(treatmentGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addTreatmentGroupButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeTreatmentGroupButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.treatmentGroupPanel.TabConstraints.tabTitle"), treatmentGroupPanel); // NOI18N

        sampleGroupPanel.setName("sampleGroupPanel"); // NOI18N

        sampleGroupList.setModel(getSampleGroupListModel());
        sampleGroupList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        sampleGroupList.setToolTipText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.sampleGroupList.toolTipText")); // NOI18N
        jScrollPane4.setViewportView(sampleGroupList);

        sampleGroupTextField.setText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.sampleGroupTextField.text")); // NOI18N
        sampleGroupTextField.setToolTipText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.sampleGroupTextField.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(addSampleGroupButton, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.addSampleGroupButton.text")); // NOI18N
        addSampleGroupButton.setMaximumSize(new java.awt.Dimension(40, 29));
        addSampleGroupButton.setMinimumSize(new java.awt.Dimension(40, 29));
        addSampleGroupButton.setPreferredSize(new java.awt.Dimension(40, 29));
        addSampleGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSampleGroupButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeSampleGroupButton, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.removeSampleGroupButton.text")); // NOI18N
        removeSampleGroupButton.setMaximumSize(new java.awt.Dimension(70, 29));
        removeSampleGroupButton.setMinimumSize(new java.awt.Dimension(70, 29));
        removeSampleGroupButton.setPreferredSize(new java.awt.Dimension(70, 29));
        removeSampleGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSampleGroupButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sampleGroupPanelLayout = new javax.swing.GroupLayout(sampleGroupPanel);
        sampleGroupPanel.setLayout(sampleGroupPanelLayout);
        sampleGroupPanelLayout.setHorizontalGroup(
            sampleGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sampleGroupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sampleGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sampleGroupTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                    .addGroup(sampleGroupPanelLayout.createSequentialGroup()
                        .addComponent(addSampleGroupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeSampleGroupButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE))
                .addContainerGap())
        );
        sampleGroupPanelLayout.setVerticalGroup(
            sampleGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sampleGroupPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sampleGroupTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sampleGroupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addSampleGroupButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeSampleGroupButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.sampleGroupPanel.TabConstraints.tabTitle"), sampleGroupPanel); // NOI18N

        fileToGroupList.setModel(getFileToGroupListModel());
        fileToGroupList.setToolTipText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.fileToGroupList.toolTipText")); // NOI18N
        fileToGroupList.setCellRenderer(new FileListCellRenderer());
        jScrollPane2.setViewportView(fileToGroupList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(assignGroupToFile)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(assignGroupToFile))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addTreatmentGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTreatmentGroupButtonActionPerformed
        String txt = groupTextField.getText();
        if (addTreatmentGroup(txt)) {
            return;
        }
    }//GEN-LAST:event_addTreatmentGroupButtonActionPerformed

    private void removeTreatmentGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTreatmentGroupButtonActionPerformed
        int idx = groupList.getSelectedIndex();
        String s = (String) groupList.getSelectedValue();
        System.out.println("Selected value: " + s);
        removeTreatmentGroup(s, idx);
        firePropertyChange("VALIDATE", null, this);
//        removeGroup(s, idx);
    }//GEN-LAST:event_removeTreatmentGroupButtonActionPerformed

    private void assignGroupToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignGroupToFileActionPerformed
        Object[] files = fileToGroupList.getSelectedValues();
        switch (jTabbedPane1.getSelectedComponent().getName()) {
            case "treatmentGroupPanel":
                String group = (String) groupList.getSelectedValue();
                addFileToGroupMapping(files, group);
                break;
            case "sampleGroupPanel":
                String sampleGroup = (String) sampleGroupList.getSelectedValue();
                addFileToSampleGroupMapping(files, sampleGroup);
                break;
        }
    }//GEN-LAST:event_assignGroupToFileActionPerformed

    private void detectorTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectorTypeComboBoxActionPerformed
    }//GEN-LAST:event_detectorTypeComboBoxActionPerformed

    private void separationTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_separationTypeComboBoxActionPerformed
        ISeparationType ist = (ISeparationType) separationTypeComboBox.getSelectedItem();
        if (ist instanceof GCGC || ist instanceof LCLC) {
            jCheckBox1.setEnabled(true);
        } else {
            jCheckBox1.setEnabled(false);
            jCheckBox1.setSelected(false);
            modulationTimeTextField.setEnabled(false);
            scanRateTextField.setEnabled(false);
        }

    }//GEN-LAST:event_separationTypeComboBoxActionPerformed

    private void addSampleGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSampleGroupButtonActionPerformed
        String txt = sampleGroupTextField.getText();
        if (addSampleGroup(txt)) {
            return;
        }
    }//GEN-LAST:event_addSampleGroupButtonActionPerformed

    private void removeSampleGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSampleGroupButtonActionPerformed
        int idx = sampleGroupList.getSelectedIndex();
        String s = (String) sampleGroupList.getSelectedValue();
        System.out.println("Selected value: " + s);
        removeSampleGroup(s, idx);
        firePropertyChange("VALIDATE", null, this);
    }//GEN-LAST:event_removeSampleGroupButtonActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isEnabled()) {
            if (jCheckBox1.isSelected()) {
                ISeparationType ist = (ISeparationType) separationTypeComboBox.getSelectedItem();
                if (ist instanceof GCGC || ist instanceof LCLC) {
                    modulationTimeTextField.setEnabled(true);
                    scanRateTextField.setEnabled(true);
                } else {
                    jCheckBox1.setEnabled(false);
                    modulationTimeTextField.setEnabled(false);
                    scanRateTextField.setEnabled(false);
                }
            } else {
                modulationTimeTextField.setEnabled(false);
                scanRateTextField.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSampleGroupButton;
    private javax.swing.JButton addTreatmentGroupButton;
    private javax.swing.JButton assignGroupToFile;
    private javax.swing.JComboBox detectorTypeComboBox;
    private javax.swing.JList fileToGroupList;
    private javax.swing.JList groupList;
    private javax.swing.JTextField groupTextField;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel modulationTimeLabel;
    private javax.swing.JTextField modulationTimeTextField;
    private javax.swing.JButton removeSampleGroupButton;
    private javax.swing.JButton removeTreatmentGroupButton;
    private javax.swing.JList sampleGroupList;
    private javax.swing.JPanel sampleGroupPanel;
    private javax.swing.JTextField sampleGroupTextField;
    private javax.swing.JTextField scanRateTextField;
    private javax.swing.JComboBox separationTypeComboBox;
    private javax.swing.JPanel treatmentGroupPanel;
    // End of variables declaration//GEN-END:variables
	private DefaultListModel treatmentGroupListModel = null;
    private DefaultListModel fileToGroupListModel = null;
    private DefaultListModel sampleGroupListModel = null;

    private DefaultListModel getTreatmentGroupListModel() {
        if (treatmentGroupListModel == null) {
            treatmentGroupListModel = new DefaultListModel();
        }
        return treatmentGroupListModel;
    }

    private DefaultListModel getFileToGroupListModel() {
        if (fileToGroupListModel == null) {
            fileToGroupListModel = new DefaultListModel();
        }
        return fileToGroupListModel;
    }

    private DefaultListModel getSampleGroupListModel() {
        if (sampleGroupListModel == null) {
            sampleGroupListModel = new DefaultListModel();
        }
        return sampleGroupListModel;
    }

    @Override
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        groupTextField.requestFocus();
    }

    private IDetectorType[] getDetectorTypes() {
        return TypeFactory.getAvailableDetectorTypes().toArray(new IDetectorType[]{});
    }

    private ISeparationType[] getSeparationTypes() {
        return TypeFactory.getAvailableSeparationTypes().toArray(new ISeparationType[]{});
    }

    @Override
    public boolean valid(WizardDescriptor wizardDescriptor) {

        if (getTreatmentGroupListModel().isEmpty()) {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_INFO_MESSAGE,
                    "Please define at least one chromatogram treatment group.");
            return false; // no treatment group
        }
        if (!getSampleGroupListModel().isEmpty()) {
            Enumeration<?> e = fileToGroupListModel.elements();
            while (e.hasMoreElements()) {
                Object o = e.nextElement();
                if (o instanceof File) {
                    if (fileToSampleGroup.containsKey((File) o)) {
                        if (fileToSampleGroup.get((File) o) == null) {
                            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                                    "Please assign chromatogram " + ((File) o).getName() + " to a sample group.");
                            return false;
                        }
                    } else {
                        wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                                "Please assign every chromatogram to a sample group.");
                        return false;
                    }
                }
            }
        }
        Enumeration<?> e = fileToGroupListModel.elements();
        boolean allFilesMapped = true;
        while (e.hasMoreElements()) {
            Object o = e.nextElement();
            if (o instanceof File) {
                System.out.println("Checking file " + (File) o);
                if (fileToTreatmentGroup.containsKey((File) o)) {
                    if (fileToTreatmentGroup.get((File) o) == null) {
                        wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                                "Please assign chromatogram " + ((File) o).getName() + " to a treatment group.");
                        return false;
                    }
                } else {
                    wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                            "Please assign every chromatogram to a treatment group.");
                    return false;
                }
            }
        }

        wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "");
        return true;
    }

    @Override
    public void store(WizardDescriptor d) {
        d.putProperty("groupMapping", fileToTreatmentGroup);
        d.putProperty("sampleGroupMapping", fileToSampleGroup);
        d.putProperty("detectorType", (IDetectorType) detectorTypeComboBox.getSelectedItem());
        d.putProperty("separationType", (ISeparationType) separationTypeComboBox.getSelectedItem());
        if (modulationTimeTextField.isEnabled() && !(modulationTimeTextField.getText().isEmpty())) {
            d.putProperty("modulationTime", Double.valueOf(modulationTimeTextField.getText().trim()));
        }
        if (scanRateTextField.isEnabled() && !(scanRateTextField.getText().isEmpty())) {
            d.putProperty("scanRate", Double.valueOf(scanRateTextField.getText().trim()));
        }
    }

    @Override
    public void read(WizardDescriptor settings) {
        addFiles(settings);
        fileToTreatmentGroup = (Map<File, String>) settings.getProperty("groupMapping");
        getTreatmentGroupListModel().clear();
        if (fileToTreatmentGroup == null) {
            fileToTreatmentGroup = new LinkedHashMap<File, String>();
        } else {
            for (Entry<File, String> e : fileToTreatmentGroup.entrySet()) {
                System.out.println("Restoring treatment group " + e.getValue());
                if (!getTreatmentGroupListModel().contains(e.getValue())) {
                    getTreatmentGroupListModel().addElement(e.getValue());
                }
            }
        }
        fileToSampleGroup = (Map<File, String>) settings.getProperty("sampleGroupMapping");
        getSampleGroupListModel().clear();
        if (fileToSampleGroup == null) {
            fileToSampleGroup = new LinkedHashMap<File, String>();
        } else {
            for (Entry<File, String> e : fileToSampleGroup.entrySet()) {
                System.out.println("Restoring sample group " + e.getValue());
                if (!getSampleGroupListModel().contains(e.getValue())) {
                    getSampleGroupListModel().addElement(e.getValue());
                }
            }
        }
        IDetectorType idt = (IDetectorType) settings.getProperty("detectorType");
        if (idt != null) {
            detectorTypeComboBox.setSelectedItem(idt);
        }
        detectorTypeComboBoxActionPerformed(null);
        ISeparationType ist = (ISeparationType) settings.getProperty("separationType");
        if (ist != null) {
            separationTypeComboBox.setSelectedItem(ist);
        }
        separationTypeComboBoxActionPerformed(null);
        if (settings.getProperty("modulationTime") != null) {
            jCheckBox1.setEnabled(true);
            modulationTimeTextField.setEnabled(true);
            modulationTimeTextField.setText(((Double) settings.getProperty("modulationTime")).toString());
        }
        if (settings.getProperty("scanRate") != null) {
            jCheckBox1.setEnabled(true);
            scanRateTextField.setEnabled(true);
            scanRateTextField.setText(((Double) settings.getProperty("scanRate")).toString());
        }
    }

    protected void addFiles(WizardDescriptor settings) {
        String inputFiles = ((String) settings.getProperty("input.dataInfo"));
        if (inputFiles != null) {
            getFileToGroupListModel().clear();
            String[] ifs = inputFiles.split(",");
            for (String s : ifs) {
                getFileToGroupListModel().addElement(new File(s));
            }
        }

    }

    protected void addFileToGroupMapping(Object[] files, String group) {
        for (Object o : files) {
            File f = (File) o;
            fileToTreatmentGroup.put(f, group);
        }
        fileToGroupList.setCellRenderer(new FileListCellRenderer());
        firePropertyChange("VALIDATE", null, this);
    }

    protected void addFileToSampleGroupMapping(Object[] files, String sampleGroup) {
        for (Object o : files) {
            File f = (File) o;
            fileToSampleGroup.put(f, sampleGroup);
        }
        fileToGroupList.setCellRenderer(new FileListCellRenderer());
        firePropertyChange("VALIDATE", null, this);
    }

    private boolean addSampleGroup(String txt) {
        if (txt == null || txt.equals("")) {
            return false;
        }
        if (!getSampleGroupListModel().contains(txt)) {
            if (!fileToSampleGroup.values().contains(txt)) {
                getSampleGroupListModel().addElement(txt);
                firePropertyChange("VALIDATE", null, this);
            }
            return true;
        }
        return false;
    }

    private boolean addTreatmentGroup(String txt) {
        if (txt == null || txt.equals("")) {
            return false;
        }
        if (!getTreatmentGroupListModel().contains(txt)) {
            if (!fileToTreatmentGroup.values().contains(txt)) {
                getTreatmentGroupListModel().addElement(txt);
                firePropertyChange("VALIDATE", null, this);
            }
            return true;
        }
        return false;
    }

    protected void removeSampleGroup(String sampleGroup, int idx) {
        if (!getSampleGroupListModel().isEmpty() && idx > -1) {
            getSampleGroupListModel().removeElementAt(idx);
            Set<Entry<File, String>> es = fileToSampleGroup.entrySet();
            List<File> toRemove = new LinkedList<File>();
            for (Entry<File, String> e : es) {
                if (e.getValue().equals(sampleGroup)) {
                    toRemove.add(e.getKey());
                }
            }
            for (File file : toRemove) {
                fileToSampleGroup.remove(file);
            }
            fileToGroupList.setCellRenderer(new FileListCellRenderer());
            firePropertyChange("VALIDATE", null, this);
        }
    }

    protected void removeTreatmentGroup(String group, int idx) {
        if (!getTreatmentGroupListModel().isEmpty() && idx > -1) {
            getTreatmentGroupListModel().removeElementAt(idx);
            Set<Entry<File, String>> es = fileToTreatmentGroup.entrySet();
            List<File> toRemove = new LinkedList<File>();
            for (Entry<File, String> e : es) {
                if (e.getValue().equals(group)) {
                    toRemove.add(e.getKey());
                }
            }
            for (File file : toRemove) {
                fileToTreatmentGroup.remove(file);
            }
            fileToGroupList.setCellRenderer(new FileListCellRenderer());
            firePropertyChange("VALIDATE", null, this);
        }
    }

    @Override
    public void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
        firePropertyChange("VALIDATE", null, this);
    }

    class FileListCellRenderer extends JLabel implements ListCellRenderer {

        public FileListCellRenderer() {
            setOpaque(true);
            setHorizontalAlignment(LEFT);
            setVerticalAlignment(CENTER);
        }

        @Override
        public Component getListCellRendererComponent(JList list, Object o, int i, boolean isSelected, boolean cellHasFocus) {

            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }

            if (o instanceof File) {
                File f = (File) o;
                String group = "";
                String sampleGroup = "";
                if (fileToTreatmentGroup.containsKey(f)) {
                    group = fileToTreatmentGroup.get(f);
                    if (group == null) {
                        group = "";
                    }
                }
                if (fileToSampleGroup.containsKey(f)) {
                    sampleGroup = fileToSampleGroup.get(f);
                    if (sampleGroup == null) {
                        sampleGroup = "";
                    }
                }
                String filename = f.getName();
                setText(filename + " | Treatment: " + group + " | Sample: " + sampleGroup);
                setToolTipText(f.getAbsolutePath());
                return this;
            }
            return null;
        }
    }
}
