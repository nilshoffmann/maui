/*
 * Maui, Maltcms User Interface. 
 * Copyright (C) 2008-2014, The authors of Maui. All rights reserved.
 *
 * Project website: http://maltcms.sf.net
 *
 * Maui may be used under the terms of either the
 *
 * GNU Lesser General Public License (LGPL)
 * http://www.gnu.org/licenses/lgpl.html
 *
 * or the
 *
 * Eclipse Public License (EPL)
 * http://www.eclipse.org/org/documents/epl-v10.php
 *
 * As a user/recipient of Maui, you may choose which license to receive the code 
 * under. Certain files or entire directories may not be covered by this 
 * dual license, but are subject to licenses compatible to both LGPL and EPL.
 * License exceptions are explicitly declared in all relevant files or in a 
 * LICENSE file in the relevant directories.
 *
 * Maui is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. Please consult the relevant license documentation
 * for details.
 */
package net.sf.maltcms.chromaui.project.spi.options;

import cross.Factory;
import cross.datastructures.fragments.CachedList;
import cross.datastructures.fragments.ImmutableVariableFragment2;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.prefs.Preferences;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFormattedTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import net.sf.ehcache.store.MemoryStoreEvictionPolicy;
import net.sf.maltcms.chromaui.project.spi.Installer;
import net.sf.maltcms.chromaui.project.spi.caching.ChromatogramScanCache;
import org.openide.util.NbPreferences;

final class ChromatogramScanCachePanel extends javax.swing.JPanel {

    private static final String keyPrefetchOnMiss = CachedList.class.getName()
            + ".prefetchOnMiss";
    private static final String keyCacheSize = CachedList.class.getName() + ".cacheSize";
    private static final String keyUseCachedList = ImmutableVariableFragment2.class.getName() + ".useCachedList";

    private final ChromatogramScanCacheOptionsPanelController controller;

    ChromatogramScanCachePanel(ChromatogramScanCacheOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        maxNumberOfCachedScans.getDocument().addDocumentListener(new OptionsDocumentListener(controller));
        maxNumberOfCachedScans.addKeyListener(new OptionsDocumentListener(controller));
        maximumNumberOfPreloadedScans.getDocument().addDocumentListener(new OptionsDocumentListener(controller));
        maximumNumberOfPreloadedScans.addKeyListener(new OptionsDocumentListener(controller));
        timeToIdle.getDocument().addDocumentListener(new OptionsDocumentListener(controller));
        timeToIdle.addKeyListener(new OptionsDocumentListener(controller));
        timeToLive.getDocument().addDocumentListener(new OptionsDocumentListener(controller));
        timeToLive.addKeyListener(new OptionsDocumentListener(controller));
    }

    private class OptionsDocumentListener implements DocumentListener, KeyListener {

        private final ChromatogramScanCacheOptionsPanelController controller;

        private OptionsDocumentListener(ChromatogramScanCacheOptionsPanelController controller) {
            this.controller = controller;
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            controller.changed();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            controller.changed();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
//            controller.changed();
        }

        @Override
        public void keyTyped(KeyEvent e) {
            controller.changed();
        }

        @Override
        public void keyPressed(KeyEvent e) {
            controller.changed();
        }

        @Override
        public void keyReleased(KeyEvent e) {
            controller.changed();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        msScanCacheSettingsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        maxNumberOfCachedScans = new javax.swing.JFormattedTextField();
        timeToIdle = new javax.swing.JFormattedTextField();
        timeToLive = new javax.swing.JFormattedTextField();
        evictionPolicy = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        msScanLoaderSettingsPanel = new javax.swing.JPanel();
        useLazyLoading = new javax.swing.JCheckBox();
        eagerPrefetchOnMiss = new javax.swing.JCheckBox();
        maximumNumberOfPreloadedScans = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        notificationAreaPanel = new javax.swing.JPanel();
        notificationLabel = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        msScanCacheSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ChromatogramScanCachePanel.class, "ChromatogramScanCachePanel.msScanCacheSettingsPanel.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ChromatogramScanCachePanel.class, "ChromatogramScanCachePanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ChromatogramScanCachePanel.class, "ChromatogramScanCachePanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ChromatogramScanCachePanel.class, "ChromatogramScanCachePanel.jLabel3.text")); // NOI18N

        maxNumberOfCachedScans.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        maxNumberOfCachedScans.setToolTipText(org.openide.util.NbBundle.getMessage(ChromatogramScanCachePanel.class, "ChromatogramScanCachePanel.maxNumberOfCachedScans.toolTipText")); // NOI18N
        maxNumberOfCachedScans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxNumberOfCachedScansActionPerformed(evt);
            }
        });

        timeToIdle.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        timeToIdle.setToolTipText(org.openide.util.NbBundle.getMessage(ChromatogramScanCachePanel.class, "ChromatogramScanCachePanel.timeToIdle.toolTipText")); // NOI18N
        timeToIdle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeToIdleActionPerformed(evt);
            }
        });

        timeToLive.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        timeToLive.setToolTipText(org.openide.util.NbBundle.getMessage(ChromatogramScanCachePanel.class, "ChromatogramScanCachePanel.timeToLive.toolTipText")); // NOI18N
        timeToLive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeToLiveActionPerformed(evt);
            }
        });

        evictionPolicy.setModel(getEvictionPolicyModel());
        evictionPolicy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evictionPolicyActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ChromatogramScanCachePanel.class, "ChromatogramScanCachePanel.jLabel4.text")); // NOI18N

        javax.swing.GroupLayout msScanCacheSettingsPanelLayout = new javax.swing.GroupLayout(msScanCacheSettingsPanel);
        msScanCacheSettingsPanel.setLayout(msScanCacheSettingsPanelLayout);
        msScanCacheSettingsPanelLayout.setHorizontalGroup(
            msScanCacheSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(msScanCacheSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(msScanCacheSettingsPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(msScanCacheSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel3)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1)
                        .addComponent(jLabel4))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(msScanCacheSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(evictionPolicy, 0, 420, Short.MAX_VALUE)
                        .addComponent(maxNumberOfCachedScans)
                        .addComponent(timeToIdle)
                        .addComponent(timeToLive))
                    .addContainerGap()))
        );
        msScanCacheSettingsPanelLayout.setVerticalGroup(
            msScanCacheSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 154, Short.MAX_VALUE)
            .addGroup(msScanCacheSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(msScanCacheSettingsPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(msScanCacheSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(maxNumberOfCachedScans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(msScanCacheSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(timeToIdle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(msScanCacheSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(timeToLive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(msScanCacheSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(evictionPolicy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        msScanLoaderSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ChromatogramScanCachePanel.class, "ChromatogramScanCachePanel.msScanLoaderSettingsPanel.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(useLazyLoading, org.openide.util.NbBundle.getMessage(ChromatogramScanCachePanel.class, "ChromatogramScanCachePanel.useLazyLoading.text")); // NOI18N
        useLazyLoading.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useLazyLoadingActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(eagerPrefetchOnMiss, org.openide.util.NbBundle.getMessage(ChromatogramScanCachePanel.class, "ChromatogramScanCachePanel.eagerPrefetchOnMiss.text")); // NOI18N
        eagerPrefetchOnMiss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eagerPrefetchOnMissActionPerformed(evt);
            }
        });

        maximumNumberOfPreloadedScans.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        maximumNumberOfPreloadedScans.setToolTipText(org.openide.util.NbBundle.getMessage(ChromatogramScanCachePanel.class, "ChromatogramScanCachePanel.maximumNumberOfPreloadedScans.toolTipText")); // NOI18N
        maximumNumberOfPreloadedScans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maximumNumberOfPreloadedScansActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(ChromatogramScanCachePanel.class, "ChromatogramScanCachePanel.jLabel5.text")); // NOI18N

        javax.swing.GroupLayout msScanLoaderSettingsPanelLayout = new javax.swing.GroupLayout(msScanLoaderSettingsPanel);
        msScanLoaderSettingsPanel.setLayout(msScanLoaderSettingsPanelLayout);
        msScanLoaderSettingsPanelLayout.setHorizontalGroup(
            msScanLoaderSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(msScanLoaderSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(msScanLoaderSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maximumNumberOfPreloadedScans)
                    .addGroup(msScanLoaderSettingsPanelLayout.createSequentialGroup()
                        .addGroup(msScanLoaderSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eagerPrefetchOnMiss)
                            .addComponent(useLazyLoading))
                        .addGap(0, 231, Short.MAX_VALUE)))
                .addContainerGap())
        );
        msScanLoaderSettingsPanelLayout.setVerticalGroup(
            msScanLoaderSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(msScanLoaderSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(useLazyLoading)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eagerPrefetchOnMiss)
                .addGap(18, 18, 18)
                .addGroup(msScanLoaderSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maximumNumberOfPreloadedScans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(notificationLabel, org.openide.util.NbBundle.getMessage(ChromatogramScanCachePanel.class, "ChromatogramScanCachePanel.notificationLabel.text")); // NOI18N

        javax.swing.GroupLayout notificationAreaPanelLayout = new javax.swing.GroupLayout(notificationAreaPanel);
        notificationAreaPanel.setLayout(notificationAreaPanelLayout);
        notificationAreaPanelLayout.setHorizontalGroup(
            notificationAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(notificationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        notificationAreaPanelLayout.setVerticalGroup(
            notificationAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(notificationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(msScanCacheSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(msScanLoaderSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(notificationAreaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(msScanCacheSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(msScanLoaderSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notificationAreaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void evictionPolicyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evictionPolicyActionPerformed
        controller.changed();
    }//GEN-LAST:event_evictionPolicyActionPerformed

    private void maxNumberOfCachedScansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxNumberOfCachedScansActionPerformed
        controller.changed();
    }//GEN-LAST:event_maxNumberOfCachedScansActionPerformed

    private void timeToIdleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeToIdleActionPerformed
        controller.changed();
    }//GEN-LAST:event_timeToIdleActionPerformed

    private void timeToLiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeToLiveActionPerformed
        controller.changed();
    }//GEN-LAST:event_timeToLiveActionPerformed

    private void useLazyLoadingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useLazyLoadingActionPerformed
        eagerPrefetchOnMiss.setEnabled(useLazyLoading.isSelected());
        maximumNumberOfPreloadedScans.setEnabled(useLazyLoading.isSelected());
        controller.changed();
    }//GEN-LAST:event_useLazyLoadingActionPerformed

    private void eagerPrefetchOnMissActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eagerPrefetchOnMissActionPerformed
        controller.changed();
    }//GEN-LAST:event_eagerPrefetchOnMissActionPerformed

    private void maximumNumberOfPreloadedScansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maximumNumberOfPreloadedScansActionPerformed
        controller.changed();
    }//GEN-LAST:event_maximumNumberOfPreloadedScansActionPerformed

    void load() {
        useLazyLoading.setSelected(NbPreferences.forModule(Installer.class).node("cross").getBoolean(keyUseCachedList, false));
        maximumNumberOfPreloadedScans.setValue(NbPreferences.forModule(Installer.class).node("cross").getInt(keyCacheSize, 1024));
        eagerPrefetchOnMiss.setSelected(NbPreferences.forModule(Installer.class).node("cross").getBoolean(keyPrefetchOnMiss, false));
        eagerPrefetchOnMiss.setEnabled(useLazyLoading.isSelected());
        maximumNumberOfPreloadedScans.setEnabled(useLazyLoading.isSelected());
        Preferences prefs = NbPreferences.forModule(ChromatogramScanCache.class);
        maxNumberOfCachedScans.setValue(prefs.getInt("maxEntriesLocalHeap", 1000));
        timeToIdle.setValue(prefs.getLong("timeToIdle", 30l));
        timeToLive.setValue(prefs.getLong("timeToLive", 60l));
        evictionPolicy.setSelectedItem(MemoryStoreEvictionPolicy.fromString(prefs.get("evictionPolicy", MemoryStoreEvictionPolicy.LRU.toString())));
    }

    void store() {
        NbPreferences.forModule(Installer.class).node("cross").putBoolean(keyUseCachedList, useLazyLoading.isSelected());
        NbPreferences.forModule(Installer.class).node("cross").putInt(keyCacheSize, getValueAsInt(maximumNumberOfPreloadedScans));
        NbPreferences.forModule(Installer.class).node("cross").putBoolean(keyPrefetchOnMiss, eagerPrefetchOnMiss.isSelected());
        Preferences prefs = NbPreferences.forModule(ChromatogramScanCache.class);
        prefs.putInt("maxEntriesLocalHeap", getValueAsInt(maxNumberOfCachedScans));
        prefs.putLong("timeToIdle", (Long) timeToIdle.getValue());
        prefs.putLong("timeToLive", (Long) timeToLive.getValue());
        prefs.put("evictionPolicy", evictionPolicy.getSelectedItem().toString());
        Factory.getInstance().getConfiguration().setProperty(keyPrefetchOnMiss, eagerPrefetchOnMiss.isSelected());
        Factory.getInstance().getConfiguration().setProperty(keyCacheSize, getValueAsInt(maximumNumberOfPreloadedScans));
        ImmutableVariableFragment2.useCachedIndexedAccess = useLazyLoading.isSelected();
    }

    private int getValueAsInt(JFormattedTextField jtf) {
        Object o = jtf.getValue();
        if (o instanceof Long) {
            return ((Long) o).intValue();
        } else if (o instanceof Integer) {
            return ((Integer) o);
        } else {
            throw new IllegalArgumentException("Can not convert value of type " + o.getClass().getName() + " to Integer!");
        }
    }

    boolean valid() {
        long tti = (Long) timeToIdle.getValue();
        if (tti < 0) {
            notificationLabel.setText("<html><font color=red>Time to idle must be positive!</font></html>");
            return false;
        } else {
            notificationLabel.setText("");
        }
        long ttl = (Long) timeToLive.getValue();
        if (ttl < 0) {
            notificationLabel.setText("<html><font color=red>Time to live must be positive!</font></html>");
            return false;
        } else {
            notificationLabel.setText("");
        }
        int melh = getValueAsInt(maxNumberOfCachedScans);
        if (melh < 0) {
            notificationLabel.setText("<html><font color=red>Number of cached scans must be positive!</font></html>");
            return false;
        }
        notificationLabel.setText("");
        int mnpls = getValueAsInt(maximumNumberOfPreloadedScans);
        if (mnpls < 0) {
            notificationLabel.setText("<html><font color=red>Number of scans to preload must be positive!</font></html>");
            return false;
        }
        if(needsSave()) {
            notificationLabel.setText("<html><font color=blue>Projects will be saved and reopened!</font></html>");
        }else{
            notificationLabel.setText("");
        }

        return true;
    }

    private DefaultComboBoxModel<MemoryStoreEvictionPolicy> getEvictionPolicyModel() {
        DefaultComboBoxModel<MemoryStoreEvictionPolicy> dcm = new DefaultComboBoxModel<>(new MemoryStoreEvictionPolicy[]{MemoryStoreEvictionPolicy.FIFO, MemoryStoreEvictionPolicy.LFU, MemoryStoreEvictionPolicy.LRU});
        return dcm;
    }

    boolean needsSave() {
        if (NbPreferences.forModule(Installer.class).node("cross").getBoolean(keyUseCachedList, false) != useLazyLoading.isSelected()) {
            return true;
        }
        if (NbPreferences.forModule(Installer.class).node("cross").getInt(keyCacheSize, 1024) != getValueAsInt(maximumNumberOfPreloadedScans)) {
            return true;
        }
        if (NbPreferences.forModule(Installer.class).node("cross").getBoolean(keyPrefetchOnMiss, false) != eagerPrefetchOnMiss.isSelected()) {
            return true;
        }
        Preferences prefs = NbPreferences.forModule(ChromatogramScanCache.class);
        if (prefs.getInt("maxEntriesLocalHeap", 1000) != getValueAsInt(maxNumberOfCachedScans)) {
            return true;
        }
        if (prefs.getLong("timeToIdle", 30l) != (Long) timeToIdle.getValue()) {
            return true;
        }
        if (prefs.getLong("timeToLive", 60l) != (Long) timeToLive.getValue()) {
            return true;
        }
        MemoryStoreEvictionPolicy currentPolicy = (MemoryStoreEvictionPolicy) evictionPolicy.getSelectedItem();
        return !prefs.get("evictionPolicy", MemoryStoreEvictionPolicy.LRU.toString()).equals(currentPolicy.toString());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox eagerPrefetchOnMiss;
    private javax.swing.JComboBox evictionPolicy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JFormattedTextField maxNumberOfCachedScans;
    private javax.swing.JFormattedTextField maximumNumberOfPreloadedScans;
    private javax.swing.JPanel msScanCacheSettingsPanel;
    private javax.swing.JPanel msScanLoaderSettingsPanel;
    private javax.swing.JPanel notificationAreaPanel;
    private javax.swing.JLabel notificationLabel;
    private javax.swing.JFormattedTextField timeToIdle;
    private javax.swing.JFormattedTextField timeToLive;
    private javax.swing.JCheckBox useLazyLoading;
    // End of variables declaration//GEN-END:variables
}
