/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.sf.maltcms.common.charts.overlay.ui;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.ActionMap;
import net.sf.maltcms.common.charts.api.overlay.ChartOverlay;
import net.sf.maltcms.common.charts.overlay.nodes.OverlayNode;
import org.netbeans.swing.outline.Outline;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.OutlineView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Lookup;

/**
 *
 * @author Nils Hoffmann
 */
public class OverlayNavigatorPanelUI extends javax.swing.JPanel implements ExplorerManager.Provider, Lookup.Provider {
    
    private ExplorerManager manager = new ExplorerManager();
    private Lookup lookup;

    /**
     * Creates new form OverlayNavigatorPanelUI
     */
    public OverlayNavigatorPanelUI() {
        ActionMap map = getActionMap();
        initComponents();
        OutlineView outline = new OutlineView("Overlays");
        Outline o = outline.getOutline();
        o.setRootVisible(false);
        add(outline, BorderLayout.CENTER);
        lookup = ExplorerUtils.createLookup(manager, map);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public ExplorerManager getExplorerManager() {
        return manager;
    }
    
    @Override
    public Lookup getLookup() {
        return lookup;
    }
    
    @Override
    public void addNotify() {
        super.addNotify();
        ExplorerUtils.activateActions(manager, true);
    }
    
    @Override
    public void removeNotify() {
        ExplorerUtils.activateActions(manager, false);
        super.removeNotify();
    }
    
    public void setContent(Collection<? extends OverlayNode> overlays) {
        if (overlays.isEmpty() || overlays == null) {
            manager.setRootContext(Node.EMPTY);
        } else {
            final List<OverlayNode> l = new ArrayList<OverlayNode>(overlays);
            Collections.sort(l, new Comparator<OverlayNode>() {
                @Override
                public int compare(OverlayNode t, OverlayNode t1) {
                    return t.getLookup().lookup(ChartOverlay.class).getLayerPosition() - t1.getLookup().lookup(ChartOverlay.class).getLayerPosition();
                }
            });
            Children.Array ca = new Children.Array();
            Node[] nodes = new Node[overlays.size()];
            for (int i = 0; i < nodes.length; i++) {
                nodes[i] = l.get(i).cloneNode();//,Children.LEAF,Lookups.fixed(co));
            }
            ca.add(nodes);
            Node root = new AbstractNode(ca);
            manager.setRootContext(root);
        }
    }
}
