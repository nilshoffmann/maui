<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See harness/README in the NetBeans platform -->
<!-- for some information on what you could do (e.g. targets to override). -->
<!-- If you delete this file and reopen the project it will be recreated. -->
<project name="omics-base" basedir=".">
    <description>Builds the module suite omics-base.</description>
    <import file="${basedir}/../nbproject/platform-defaults.xml"/>
    <import file="nbproject/build-impl.xml"/>
	
	<property name="project.release.name" value="${app.name}"/>
    <property name="project.release.version" value="${app.version.release}"/>
    <property name="project.release.path" value="${app.name}/${app.version.major}.${app.version.minor}"/>

    <target name="release-and-deploy" description="Prepare a release" depends="prepare-release,deploy">    
    </target>
    <target name="upload-credentials" description="Ask for user credentials">
        <input addproperty="upload.username">Please enter username for upload:</input>
    </target>

    <target name="prepare-release" description="Prepares a release" depends="build,test,nbms">
    </target>

    <target name="deploy" description="Deploys release files" depends="upload-credentials,upload-homepage,upload-updatecenter">
    </target>
    
    <target name="upload-homepage" description="Deploys homepage" depends="upload-credentials">
        <exec command="rsync" inputstring="">
            <arg value="-avtruP"/>
            <arg value="-e ssh "/>
            <arg value="build/site/"/>
            <arg value="${upload.username}@maltcms.de:/var/www/${project.release.path}/"/>
        </exec>    
    </target>
    
    <target name="upload-updatecenter" description="Upload update center" depends="upload-credentials">
        <exec executable="rsync" inputstring="">
            <arg value="-avtruP"/>
			<arg value="--recursive"/>
            <arg value="-e ssh"/>
            <arg value="build/updates/"/>
            <arg value="${upload.username}@maltcms.de:/var/www/${project.release.path}/updates/"/>
        </exec>
    </target>
	
	<target name="-init-ant-contrib">
		<echo>Configuring ant-contrib for Netbeans use...</echo>
		<property name="ant-contrib-loc" value="${basedir}/../tools/ant/ant-contrib-1.0b3.jar"/>
		<available file="${ant-contrib-loc}" property="ant-contrib.present"/>
		<fail unless="ant-contrib.present" message="The ant-contrib jar doesn't exist at: ${ant-contrib-loc}, can't build. Check your settings!" />
		<!--We are not in Hudson-->
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="${ant-contrib-loc}"/>
			</classpath>
		</taskdef>
	</target>
	
	<target name="javadoc" depends="-init,-init-ant-contrib,branding,release,-hide-excluded-modules" description="Create JavaDoc for all modules in the suite.">
		<!-- create a path for later reference -->
		<path id="modules.sorted.path">
			<pathelement path="${modules.sorted}"/>
		</path>
		<subant target="javadoc" buildpath="${modules.sorted}" inheritrefs="false" inheritall="false"/>
		<mkdir dir="${basedir}/build/site/javadoc"/>
		<copy todir="${basedir}/build/site/javadoc" flatten="false">
			<fileset dir="${basedir}">
				<include name="**/build/javadoc/**"/>
				<exclude name="build/javadoc/**"/>
			</fileset>
			<cutdirsmapper dirs="3"/>
		</copy>
		<copy todir="${basedir}/build/site/" flatten="false">
			<fileset dir="${basedir}/site/public_html">
				<include name="**"/>
			</fileset>
		</copy>
		<echo>Modules sorted: ${modules.sorted}</echo>
		<echo file="${basedir}/build/site/javadoc/index.html"><![CDATA[
<!DOCTYPE html>
<html>
	<head>
		<title></title>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	</head>
	<body>
		<div>Modules</div>
		<ul>
]]></echo>
		<for param="file">
			<path refid="modules.sorted.path"/>
			<sequential>
				<echo>Adding JavaDoc for Module: @{file}</echo>
				<pathconvert property="relative-path">
					<path path="@{file}"/>
					<chainedmapper>
						<regexpmapper from=".*/(.+)$" to="\1" casesensitive="no"/>
					</chainedmapper>
				</pathconvert>
				<echo level="info">Module Relative Path: ${relative-path}</echo>
				<!-- Retrieve official module name, not the javadoc link name -->
				<loadfile srcfile="${relative-path}/manifest.mf" property="localizing-bundle.location">
					<filterchain>
						<linecontains>
							<contains value="OpenIDE-Module-Localizing-Bundle"/>
						</linecontains>
						<!-- avoid newlines in filtered output -->
						<tokenfilter delimoutput="">
							<!-- remove prefix, trim whitespace -->
							<replacestring from="OpenIDE-Module-Localizing-Bundle:" to=""/>
							<trim/>
						</tokenfilter>
					</filterchain>
				</loadfile>
				<loadfile srcfile="${relative-path}/manifest.mf" property="module-javadoc.location">
					<filterchain>
						<linecontains>
							<contains value="OpenIDE-Module:"/>
						</linecontains>
						<!-- avoid newlines in filtered output -->
						<tokenfilter delimoutput="">
							<!-- remove prefix, remove potential suffix (like module-name/1), trim whitespace -->
							<replacestring from="OpenIDE-Module:" to=""/>
							<replaceregex pattern="/[0-9]+" replace="" flags="gi"/>
							<trim/>
						</tokenfilter>
					</filterchain>
				</loadfile>
				<!-- replace dots with hyphens/dashes -->
				<propertyregex property="module-javadoc-hyphenated.location" input="${module-javadoc.location}" regexp="\." replace="-" global="true" />
				<echo level="info">Localizing Bundle location: ${localizing-bundle.location}</echo>
				<echo level="info">Module javadoc relative location: ${module-javadoc-hyphenated.location}</echo>
				<if>
					<available file="${basedir}/build/site/javadoc/${module-javadoc-hyphenated.location}/index.html"/>
					<then>
						<!-- append link to index.html-->
						<echo file="${basedir}/build/site/javadoc/index.html" append="true"><![CDATA[
<li><a href="${module-javadoc-hyphenated.location}/index.html">${relative-path}</a></li>
]]></echo>
					</then>
					<else>
						<echo level="warn">Skipping due to missing javadoc at ${basedir}/build/site/javadoc/${module-javadoc-hyphenated.location}</echo>
					</else>
				</if>
				<!-- reset properties for next module -->
				<var name="relative-path" unset="true"/>
				<var name="localizing-bundle.location" unset="true"/>
				<var name="module-javadoc.location" unset="true"/>
				<var name="module-javadoc-hyphenated.location" unset="true"/>
			</sequential>
		</for>
		<echo file="${basedir}/build/site/javadoc/index.html" append="true"><![CDATA[
</ul>
	</body>
</html>
]]></echo>		
	</target> 
	
	<target name="zip-javadoc" depends="javadoc">
		<zip destfile="${basedir}/build/site/javadoc.zip" basedir="${basedir}/build/site/javadoc"/>
	</target>
</project>
