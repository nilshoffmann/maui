/*
 * Maui, Maltcms User Interface. 
 * Copyright (C) 2008-2014, The authors of Maui. All rights reserved.
 *
 * Project website: http://maltcms.sf.net
 *
 * Maui may be used under the terms of either the
 *
 * GNU Lesser General Public License (LGPL)
 * http://www.gnu.org/licenses/lgpl.html
 *
 * or the
 *
 * Eclipse Public License (EPL)
 * http://www.eclipse.org/org/documents/epl-v10.php
 *
 * As a user/recipient of Maui, you may choose which license to receive the code 
 * under. Certain files or entire directories may not be covered by this 
 * dual license, but are subject to licenses compatible to both LGPL and EPL.
 * License exceptions are explicitly declared in all relevant files or in a 
 * LICENSE file in the relevant directories.
 *
 * Maui is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. Please consult the relevant license documentation
 * for details.
 */
package net.sf.maltcms.chromaui.project.api.utilities;

import java.io.File;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import net.sf.maltcms.chromaui.project.api.descriptors.IChromatogramDescriptor;

/**
 *
 * @author Nils Hoffmann
 */
public class AssignSamplesToResources extends javax.swing.JPanel {

    /**
     * Creates new form AssignSamplesToResources
     */
    public AssignSamplesToResources() {
        initComponents();
    }

    private class ChromatogramDescriptorModel extends DefaultListModel<IChromatogramDescriptor> {

    }

    private class AssignedPairModel extends DefaultListModel<AssignedPair<File, IChromatogramDescriptor>> {

    }

    private class AssignedPair<T, U> {

        private final T lhs;
        private U rhs;

        AssignedPair(T t) {
            this.lhs = t;
        }

        public void setAssigned(U u) {
            this.rhs = u;
        }

        @Override
        public String toString() {
            if (rhs == null) {
                return lhs.toString();
            }
            return lhs.toString() + " <-> " + rhs.toString();
        }
    }

    public LinkedHashMap<IChromatogramDescriptor, File> getAssignedSamplesToResources() {
        LinkedHashMap<IChromatogramDescriptor, File> linkedHashMap = new LinkedHashMap<>();
        AssignedPairModel apm = (AssignedPairModel) reportsList.getModel();
        for (int i = 0; i < apm.size(); i++) {
            AssignedPair<File,IChromatogramDescriptor> pair = apm.get(i);
            if (pair.lhs == null || pair.rhs == null) {
                Logger.getLogger(AssignSamplesToResources.class.getName()).log(Level.WARNING, "Skipping pair {0}", pair);
            }else{
                linkedHashMap.put(pair.rhs, pair.lhs);
            }
        }
        return linkedHashMap;
    }

    public void setSamples(List<IChromatogramDescriptor> chromatograms) {
        ChromatogramDescriptorModel cdm = new ChromatogramDescriptorModel();
        for (IChromatogramDescriptor descr : chromatograms) {
            cdm.addElement(descr);
        }
        samplesList.setModel(cdm);
    }

    public void setReports(List<File> files) {
        AssignedPairModel cdm = new AssignedPairModel();
        for (File file : files) {
            AssignedPair ap = new AssignedPair(file);
            cdm.addElement(ap);
        }
        reportsList.setModel(cdm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        samplesList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        reportsList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        assign = new javax.swing.JButton();
        unassign = new javax.swing.JButton();

        samplesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        samplesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(samplesList);

        reportsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        reportsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(reportsList);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AssignSamplesToResources.class, "AssignSamplesToResources.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(AssignSamplesToResources.class, "AssignSamplesToResources.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(assign, org.openide.util.NbBundle.getMessage(AssignSamplesToResources.class, "AssignSamplesToResources.assign.text")); // NOI18N
        assign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(unassign, org.openide.util.NbBundle.getMessage(AssignSamplesToResources.class, "AssignSamplesToResources.unassign.text")); // NOI18N
        unassign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unassignActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(assign, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(unassign, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assign)
                    .addComponent(unassign))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignActionPerformed
        IChromatogramDescriptor sample = (IChromatogramDescriptor) samplesList.getSelectedValue();
        AssignedPair<File, IChromatogramDescriptor> pair = (AssignedPair<File, IChromatogramDescriptor>) reportsList.getSelectedValue();
        if (sample != null && pair != null) {
            if (pair.rhs == null) {
                pair.rhs = sample;
            }
        }
    }//GEN-LAST:event_assignActionPerformed

    private void unassignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unassignActionPerformed
        IChromatogramDescriptor sample = (IChromatogramDescriptor) samplesList.getSelectedValue();
        AssignedPair<File, IChromatogramDescriptor> pair = (AssignedPair<File, IChromatogramDescriptor>) reportsList.getSelectedValue();
        if (sample != null && pair != null) {
            if (pair.rhs != null) {
                pair.rhs = null;
            }
        }
    }//GEN-LAST:event_unassignActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assign;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList reportsList;
    private javax.swing.JList samplesList;
    private javax.swing.JButton unassign;
    // End of variables declaration//GEN-END:variables
}
