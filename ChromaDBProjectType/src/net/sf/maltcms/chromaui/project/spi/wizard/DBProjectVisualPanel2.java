/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.sf.maltcms.chromaui.project.spi.wizard;

import java.awt.Component;
import java.io.File;
import java.util.Enumeration;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import net.sf.maltcms.chromaui.project.api.types.GCGC;
import net.sf.maltcms.chromaui.project.api.types.IDetectorType;
import net.sf.maltcms.chromaui.project.api.types.ISeparationType;
import net.sf.maltcms.chromaui.project.api.types.TypeFactory;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.util.NbBundle;

public class DBProjectVisualPanel2 extends JPanel implements IWizardValidatable {

    public static final String PROP_PROJECT_NAME = "projectName";
    private Map<File, String> fileToGroup = new LinkedHashMap<File, String>();

    public DBProjectVisualPanel2() {
        initComponents();
        setName(NbBundle.getMessage(DBProjectVisualPanel2.class, "LBL_CreateProjectStep"));
        separationTypeComboBoxActionPerformed(null);
//        this.panel = panel;
        // Register listener on the textFields to make the automatic updates
//        projectNameTextField.getDocument().addDocumentListener(this);
//        projectLocationTextField.getDocument().addDocumentListener(this);
//        outputFolder.getDocument().addDocumentListener(this);
    }

//    public String getProjectName() {
////        return this.projectNameTextField.getText();
//    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        groupList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileToGroupList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        addGroupButton = new javax.swing.JButton();
        groupTextField = new javax.swing.JTextField();
        removeGroupButton = new javax.swing.JButton();
        assignGroupToFile = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        modulationTimeLabel = new javax.swing.JLabel();
        modulationTimeTextField = new javax.swing.JTextField();
        separationTypeComboBox = new javax.swing.JComboBox();
        detectorTypeComboBox = new javax.swing.JComboBox();

        setPreferredSize(new java.awt.Dimension(640, 480));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.jLabel1.text")); // NOI18N

        groupList.setModel(getGroupListModel());
        groupList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        groupList.setToolTipText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.groupList.toolTipText")); // NOI18N
        jScrollPane1.setViewportView(groupList);

        fileToGroupList.setModel(getFileToGroupListModel());
        fileToGroupList.setToolTipText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.fileToGroupList.toolTipText")); // NOI18N
        fileToGroupList.setCellRenderer(new FileListCellRenderer());
        jScrollPane2.setViewportView(fileToGroupList);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(addGroupButton, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.addGroupButton.text")); // NOI18N
        addGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGroupButtonActionPerformed(evt);
            }
        });

        groupTextField.setText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.groupTextField.text")); // NOI18N
        groupTextField.setToolTipText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.groupTextField.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(removeGroupButton, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.removeGroupButton.text")); // NOI18N
        removeGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeGroupButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(assignGroupToFile, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.assignGroupToFile.text")); // NOI18N
        assignGroupToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignGroupToFileActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.jPanel1.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.jLabel3.text")); // NOI18N
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.jLabel4.text")); // NOI18N
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        org.openide.awt.Mnemonics.setLocalizedText(modulationTimeLabel, org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.modulationTimeLabel.text")); // NOI18N

        modulationTimeTextField.setText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.modulationTimeTextField.text")); // NOI18N
        modulationTimeTextField.setToolTipText(org.openide.util.NbBundle.getMessage(DBProjectVisualPanel2.class, "DBProjectVisualPanel2.modulationTimeTextField.toolTipText")); // NOI18N
        modulationTimeTextField.setEnabled(false);

        separationTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(getSeparationTypes()));
        separationTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                separationTypeComboBoxActionPerformed(evt);
            }
        });

        detectorTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(getDetectorTypes()));
        detectorTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detectorTypeComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(modulationTimeLabel)
                        .addGap(2, 2, 2)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(modulationTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(detectorTypeComboBox, 0, 145, Short.MAX_VALUE)
                            .addComponent(separationTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addContainerGap(8, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(detectorTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(separationTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modulationTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modulationTimeLabel))
                .addContainerGap(86, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addGroupButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeGroupButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(86, 86, 86))
                    .addComponent(groupTextField)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(assignGroupToFile)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2))
                .addGap(20, 20, 20))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addGroupButton, assignGroupToFile, removeGroupButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(assignGroupToFile))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(groupTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addGroupButton)
                            .addComponent(removeGroupButton))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGroupButtonActionPerformed
        String txt = groupTextField.getText();
        if (addGroup(txt)) {
            return;
        }
    }//GEN-LAST:event_addGroupButtonActionPerformed

    private void removeGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeGroupButtonActionPerformed
        int idx = groupList.getSelectedIndex();
        String s = (String) groupList.getSelectedValue();
        System.out.println("Selected value: " + s);
        removeGroup(s, idx);
        firePropertyChange("VALIDATE", null, null);
//        removeGroup(s, idx);
    }//GEN-LAST:event_removeGroupButtonActionPerformed

    private void assignGroupToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignGroupToFileActionPerformed
        String group = (String) groupList.getSelectedValue();
        Object[] files = fileToGroupList.getSelectedValues();
        addFileToGroupMapping(files, group);
    }//GEN-LAST:event_assignGroupToFileActionPerformed

    private void detectorTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectorTypeComboBoxActionPerformed
    }//GEN-LAST:event_detectorTypeComboBoxActionPerformed

    private void separationTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_separationTypeComboBoxActionPerformed
        ISeparationType ist = (ISeparationType) separationTypeComboBox.getSelectedItem();
        if (ist instanceof GCGC) {
            modulationTimeTextField.setEnabled(true);
        } else {
            modulationTimeTextField.setEnabled(false);
        }
    }//GEN-LAST:event_separationTypeComboBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addGroupButton;
    private javax.swing.JButton assignGroupToFile;
    private javax.swing.JComboBox detectorTypeComboBox;
    private javax.swing.JList fileToGroupList;
    private javax.swing.JList groupList;
    private javax.swing.JTextField groupTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel modulationTimeLabel;
    private javax.swing.JTextField modulationTimeTextField;
    private javax.swing.JButton removeGroupButton;
    private javax.swing.JComboBox separationTypeComboBox;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel groupListModel = null;
    private DefaultListModel fileToGroupListModel = null;

    private DefaultListModel getGroupListModel() {
        if (groupListModel == null) {
            groupListModel = new DefaultListModel();
        }
        return groupListModel;
    }

    private DefaultListModel getFileToGroupListModel() {
        if (fileToGroupListModel == null) {
            fileToGroupListModel = new DefaultListModel();
        }
        return fileToGroupListModel;
    }

    @Override
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        groupTextField.requestFocus();
    }

    private IDetectorType[] getDetectorTypes() {
        return TypeFactory.getAvailableDetectorTypes().toArray(new IDetectorType[]{});
    }

    private ISeparationType[] getSeparationTypes() {
        return TypeFactory.getAvailableSeparationTypes().toArray(new ISeparationType[]{});
    }

    @Override
    public boolean valid(WizardDescriptor wizardDescriptor) {

        if (getGroupListModel().isEmpty()) {
            // TODO if using org.openide.dialogs >= 7.8, can use WizardDescriptor.PROP_ERROR_MESSAGE:
            wizardDescriptor.putProperty(WizardDescriptor.PROP_INFO_MESSAGE,
                    "Please define at least one chromatogram group.");
            return false; // Display name not specified
        }
        Enumeration<?> e = fileToGroupListModel.elements();
        boolean allFilesMapped = true;
        while (e.hasMoreElements()) {
            Object o = e.nextElement();
            if (o instanceof File) {
                System.out.println("Checking file " + (File) o);
                if (fileToGroup.containsKey((File) o)) {
                    if (fileToGroup.get((File) o) == null) {
                        wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                                "Please assign chromatogram " + ((File) o).getName() + " to a group.");
                        return false;
                    }
                } else {
                    wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                            "Please assign all chromatograms to a group. Select a group and a number of chromatograms and select 'assign'");
                    return false;
                }
            }
        }

        wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, "");
        return true;
    }

    @Override
    public void store(WizardDescriptor d) {
//        String name = projectNameTextField.getText().trim();
//        String folder = createdFolderTextField.getText().trim();
//        d.putProperty("projdir", new File(folder));
//        d.putProperty("name", name);
        d.putProperty("groupMapping", fileToGroup);
        d.putProperty("detectorType", (IDetectorType) detectorTypeComboBox.getSelectedItem());
        d.putProperty("separationType", (ISeparationType) separationTypeComboBox.getSelectedItem());
        if (modulationTimeTextField.isEnabled() && !(modulationTimeTextField.getText().isEmpty())) {
            d.putProperty("modulationTime", Double.valueOf(modulationTimeTextField.getText().trim()));
        }
//        StringBuilder sb = new StringBuilder();
//        for (Object o : getListModel().toArray()) {
//            File of = (File) o;
//            sb.append(FileUtil.normalizeFile(of).getAbsolutePath() + ",");
//        }
//        if (sb.length() > 0) {
//            d.putProperty("input.dataInfo", sb.substring(0, sb.length() - 1));
//        }
//        d.putProperty("output.basedir", FileUtil.normalizeFile(new File(outputFolder.getText())).getAbsolutePath());
    }

    @Override
    public void read(WizardDescriptor settings) {
//        File projectLocation = (File) settings.getProperty("projdir");
//        if (projectLocation == null || projectLocation.getParentFile() == null || !projectLocation.getParentFile().isDirectory()) {
//            try {
//                projectLocation = ProjectChooser.getProjectsFolder();
//            } catch (AssertionError ae) {
//                projectLocation = new File(System.getProperty("user.home"));
//            }
//        } else {
//            projectLocation = projectLocation.getParentFile();
//        }
//        this.projectLocationTextField.setText(projectLocation.getAbsolutePath());
//        
//        String projectName = (String) settings.getProperty("name");
//        if (projectName == null) {
//            projectName = "chromaUIProject";
//        }
//        this.projectNameTextField.setText(projectName);
//        this.projectNameTextField.selectAll
        addFiles(settings);
        fileToGroup = (Map<File, String>) settings.getProperty("groupMapping");
        getGroupListModel().clear();
        if (fileToGroup == null) {
            fileToGroup = new LinkedHashMap<File, String>();
        } else {
            for (Entry<File, String> e : fileToGroup.entrySet()) {
                addGroup(e.getValue());
            }
        }
        IDetectorType idt = (IDetectorType) settings.getProperty("detectorType");
        if (idt != null) {
            detectorTypeComboBox.setSelectedItem(idt);
        }
        detectorTypeComboBoxActionPerformed(null);
        ISeparationType ist = (ISeparationType) settings.getProperty("separationType");
        if (ist != null) {
            separationTypeComboBox.setSelectedItem(ist);
        }
        separationTypeComboBoxActionPerformed(null);
        if (settings.getProperty("modulationTime") != null) {
            modulationTimeTextField.setText(((Double) settings.getProperty("modulationTime")).toString());
        }
//        LinkedHashSet<String> groups = new LinkedHashSet<String>();



//        


//        this.outputFolder.setText((String) settings.getProperty("output.basedir"));
    }

    protected void addFiles(WizardDescriptor settings) {
        String inputFiles = ((String) settings.getProperty("input.dataInfo"));
        if (inputFiles != null) {
            getFileToGroupListModel().clear();
            String[] ifs = inputFiles.split(",");
            for (String s : ifs) {
                getFileToGroupListModel().addElement(new File(s));
            }
//            firePropertyChange("FILES", ui, ui);
        }

    }

    protected void addFileToGroupMapping(Object[] files, String group) {
        for (Object o : files) {
            File f = (File) o;
            fileToGroup.put(f, group);
        }
        fileToGroupList.setCellRenderer(new FileListCellRenderer());
        firePropertyChange("VALIDATE", null, null);
    }

    private boolean addGroup(String txt) {
        if (txt == null || txt.equals("")) {
            return false;
        }
        if (!getGroupListModel().contains(txt)) {
            if (!fileToGroup.values().contains(txt)) {
                getGroupListModel().addElement(txt);
                firePropertyChange("VALIDATE", null, null);
            }
            return true;
        }
        return false;
    }

    protected void removeGroup(String group, int idx) {
        getGroupListModel().removeElementAt(idx);
        Set<Entry<File, String>> es = fileToGroup.entrySet();
        for (Entry<File, String> e : es) {
            if (e.getValue().equals(group)) {
                fileToGroup.remove(e.getKey());
            }
        }
        fileToGroupList.setCellRenderer(new FileListCellRenderer());
//        fileToGroup.containsValue(s);
        firePropertyChange("VALIDATE", null, null);
    }

    @Override
    public void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
        firePropertyChange("VALIDATE", null, null);
    }

    class FileListCellRenderer extends JLabel implements ListCellRenderer {

        public FileListCellRenderer() {
            setOpaque(true);
            setHorizontalAlignment(LEFT);
            setVerticalAlignment(CENTER);
        }

        @Override
        public Component getListCellRendererComponent(JList list, Object o, int i, boolean isSelected, boolean cellHasFocus) {

            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }

            if (o instanceof File) {
                File f = (File) o;
                String group = "";
                if (fileToGroup.containsKey(f)) {
                    group = fileToGroup.get(f);
                    if (group == null) {
                        group = "";
                    }
                }
                String filename = f.getName();
                setText(filename + "\t" + group);
                setToolTipText(f.getAbsolutePath());
                return this;
            }
            return null;
        }
    }
}
