/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package maltcms.ui;

import net.sf.maltcms.chromaui.ui.SettingsPanel;
import java.awt.BorderLayout;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import maltcms.ui.views.ChromMSHeatmapPanel;
import net.sf.maltcms.chromaui.charts.dataset.chromatograms.Chromatogram1DDataset;
import net.sf.maltcms.chromaui.charts.events.ChartPanelMouseListener;
import net.sf.maltcms.chromaui.project.api.IChromAUIProject;
import net.sf.maltcms.chromaui.project.api.descriptors.IChromatogramDescriptor;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.annotations.XYAnnotation;
import org.openide.util.NbBundle;
import org.openide.util.Task;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.RequestProcessor;
import org.openide.util.TaskListener;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.CloneableTopComponent;

/**
 * Top component which displays something.
 * TODO add support for different renderers onto toolbar
 * TODO add support for display of annotations (annotation browser)
 * TODO add support for progress monitoring
 */
@ConvertAsProperties(dtd = "-//maltcms.ui//ChromatogramView//EN",
autostore = false)
public final class ChromatogramViewTopComponent extends CloneableTopComponent implements TaskListener {

    private static ChromatogramViewTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "ChromatogramViewTopComponent";
//    private MassSpectrumViewTopComponent secondaryView;
    private InstanceContent ic;
    private SettingsPanel sp;
    private ChromMSHeatmapPanel jp;
    private boolean loading = false;
    private List<XYAnnotation> annotations = Collections.emptyList();
    private ExecutorService es = Executors.newFixedThreadPool(1);

    public void initialize(IChromAUIProject project,
            List<IChromatogramDescriptor> filename, Chromatogram1DDataset ds) {
//        this();

        if (project != null) {
            this.ic.add(project);
        }
        for (IChromatogramDescriptor descr : filename) {
            this.ic.add(descr);
        }
        this.ic.add(ds);
        this.ic.add(new Properties());
        setDisplayName("Chromatogram View of " + new File(getLookup().lookup(
                IChromatogramDescriptor.class).getResourceLocation()).getName());
        setToolTipText(getLookup().lookup(IChromatogramDescriptor.class).
                getResourceLocation());
//        requestActive();
        //      requestFocusInWindow(true);
        sp = new SettingsPanel();
        this.ic.add(sp);
//        this.secondaryView = secondaryView;
        System.out.println("Setting ms data!");
        System.out.println("Filenames given: " + filename);
//        secondaryView.setMSData();
        this.jp = new ChromMSHeatmapPanel(ic, getLookup(), ds, new ChartPanelMouseListener(ds));
        add(this.jp, BorderLayout.CENTER);
        ic.add(this.jp);
    }

    public ChromatogramViewTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ChromatogramViewTopComponent.class,
                "CTL_ChromatogramViewTopComponent"));
        setToolTipText(NbBundle.getMessage(ChromatogramViewTopComponent.class,
                "HINT_ChromatogramViewTopComponent"));
        this.ic = new InstanceContent();

        associateLookup(new AbstractLookup(this.ic));
    }

    public void load() {
        SwingWorker<ChromMSHeatmapPanel, Void> sw = new ChromatogramViewLoaderWorker(
                this, getLookup().lookupAll(IChromatogramDescriptor.class),
                getLookup().lookup(Properties.class), getLookup().lookup(
                SettingsPanel.class), getLookup().lookup(IChromAUIProject.class));
        RequestProcessor.Task t = new RequestProcessor().post(sw);
        t.addTaskListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(ChromatogramViewTopComponent.class, "ChromatogramViewTopComponent.jButton1.text")); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);
        jToolBar1.add(jSeparator1);

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(ChromatogramViewTopComponent.class, "ChromatogramViewTopComponent.jButton2.text")); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(ChromatogramViewTopComponent.class, "ChromatogramViewTopComponent.jButton3.text")); // NOI18N
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jCheckBox1.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jCheckBox1, org.openide.util.NbBundle.getMessage(ChromatogramViewTopComponent.class, "ChromatogramViewTopComponent.jCheckBox1.text")); // NOI18N
        jCheckBox1.setFocusable(false);
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jCheckBox1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jCheckBox1);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Create a custom NotifyDescriptor, specify the panel instance as a parameter + other params
        NotifyDescriptor nd = new NotifyDescriptor(
                sp, // instance of your panel
                "Settings", // title of the dialog
                NotifyDescriptor.OK_CANCEL_OPTION, // it is Yes/No dialog ...
                NotifyDescriptor.PLAIN_MESSAGE, // ... of a question type => a question mark icon
                null, // we have specified YES_NO_OPTION => can be null, options specified by L&F,
                // otherwise specify options as:
                //     new Object[] { NotifyDescriptor.YES_OPTION, ... etc. },
                NotifyDescriptor.OK_OPTION // default option is "Yes"
                );

        // let's display the dialog now...
        if (DialogDisplayer.getDefault().notify(nd) == NotifyDescriptor.OK_OPTION) {
            Properties props = getLookup().lookup(Properties.class);
            props.setProperty(
                    "massResolution", sp.getMassResolution());
            props.setProperty("selectedMasses", sp.getSelectedMasses());
            props.setProperty("plotMode", sp.getPlotMode());
            props.setProperty("rtAxisUnit", sp.getRTAxisTimeUnit());
//            props.setProperty("autoRange", Boolean.valueOf(sp.isAutoRange()).
//                    toString());
            props.setProperty("plotType", sp.getPlotType());
            props.setProperty("renderer", sp.getRenderer().getClass().getName());
//            props.setProperty("timeRangeMin", sp.getTimeRangeMin());
//            props.setProperty("timeRangeMax", sp.getTimeRangeMax());
            load();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
//        getChromatogramPanel().
//                getChartPanelMouseListener()
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (this.jp != null) {
            ChartPanel cp = jp.getLookup().lookup(ChartPanel.class);
            if (jCheckBox1.isSelected()) {
                int size = annotations.size();
                for (int i = 0; i < size - 1; i++) {
                    cp.getChart().getXYPlot().addAnnotation(annotations.get(i),
                            false);

                }
                if (size > 0) {
                    cp.getChart().getXYPlot().addAnnotation(annotations.get(
                            size - 1),
                            true);
                }
            } else {
                List l = cp.getChart().getXYPlot().getAnnotations();
                annotations = new ArrayList<XYAnnotation>(l.size());
                for (Object obj : l) {
                    annotations.add((XYAnnotation) obj);
                }
                cp.getChart().getXYPlot().clearAnnotations();
            }
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized ChromatogramViewTopComponent getDefault() {
        if (instance == null) {
            instance = new ChromatogramViewTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ChromatogramViewTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ChromatogramViewTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(
                PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ChromatogramViewTopComponent.class.getName()).
                    warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ChromatogramViewTopComponent) {
            return (ChromatogramViewTopComponent) win;
        }
        Logger.getLogger(ChromatogramViewTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

    @Override
    public void componentOpened() {
    }

    @Override
    protected void componentActivated() {
        super.componentActivated();
        requestFocusInWindow(true);
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    @Override
    public void taskFinished(Task task) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                open();
                requestActive();
            }
        });

    }
}
