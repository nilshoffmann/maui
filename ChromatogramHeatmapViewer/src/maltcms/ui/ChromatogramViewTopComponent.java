/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package maltcms.ui;

import cross.datastructures.fragments.FileFragment;
import java.awt.BorderLayout;
import java.io.File;
import java.util.Properties;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import maltcms.ui.charts.JFreeChartViewer.ChartPanelMouseListener;
import maltcms.ui.views.ChromMSHeatmapPanel;
import net.sf.maltcms.chromaui.project.api.IChromAUIProject;
import net.sf.maltcms.chromaui.project.api.descriptors.IChromatogramDescriptor;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.RequestProcessor;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.CloneableTopComponent;

/**
 * Top component which displays something.
 * TODO add support for different renderers onto toolbar
 * TODO add support for display of annotations (annotation browser)
 * TODO add support for progress monitoring
 */
@ConvertAsProperties(dtd = "-//maltcms.ui//ChromatogramView//EN",
autostore = false)
public final class ChromatogramViewTopComponent extends CloneableTopComponent {

    private static ChromatogramViewTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "ChromatogramViewTopComponent";
    private MassSpectrumViewTopComponent secondaryView;
    private InstanceContent ic;
    private SettingsPanel sp;
    private JPanel loadingPanel;
    private ChromMSHeatmapPanel jp;
    private boolean loading = false;

    public ChromatogramViewTopComponent(IChromAUIProject project,
            IChromatogramDescriptor filename,
            MassSpectrumViewTopComponent secondaryView) {
        this();
        this.ic = new InstanceContent();

        associateLookup(new AbstractLookup(this.ic));
        if (project != null) {
            this.ic.add(project);
        }
        this.ic.add(filename);
        this.ic.add(new Properties());

//        MaltcmsDrawingSupplier mds = new MaltcmsDrawingSupplier();
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        setDisplayName("Chromatogram View of " + new File(getLookup().lookup(
                IChromatogramDescriptor.class).getResourceLocation()).getName());
        setToolTipText(getLookup().lookup(IChromatogramDescriptor.class).
                getResourceLocation());
        requestActive();
        requestFocusInWindow(true);
        sp = new SettingsPanel();
//        loadingPanel = new JPanel();
//        JProgressBar jpb = new JProgressBar();
//        jpb.setIndeterminate(true);
//        loadingPanel.add(jpb, BorderLayout.CENTER);
//        add(loadingPanel, BorderLayout.CENTER);
        this.secondaryView = secondaryView;
        System.out.println("Setting ms data!");
        secondaryView.setMSData(getChromatogramPanel().
                getFileFragment(), getChromatogramPanel().
                getChartPanelMouseListener());
        System.out.println("Filename given: " + filename);
        load();
//            this.jPanel1.add(load());
    }

    public ChromatogramViewTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ChromatogramViewTopComponent.class,
                "CTL_ChromatogramViewTopComponent"));
        setToolTipText(NbBundle.getMessage(ChromatogramViewTopComponent.class,
                "HINT_ChromatogramViewTopComponent"));
    }

    private void load() {
        if (!loading) {
            System.out.println("Running loader");
            SwingWorker<ChromMSHeatmapPanel, Void> sw = new ChromatogramViewLoaderWorker(
                    this, getLookup().lookup(IChromatogramDescriptor.class).
                    getResourceLocation(), getLookup().lookup(Properties.class));
            RequestProcessor.getDefault().post(sw);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(ChromatogramViewTopComponent.class, "ChromatogramViewTopComponent.jButton1.text")); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Create a custom NotifyDescriptor, specify the panel instance as a parameter + other params
        NotifyDescriptor nd = new NotifyDescriptor(
                sp, // instance of your panel
                "Settings", // title of the dialog
                NotifyDescriptor.OK_CANCEL_OPTION, // it is Yes/No dialog ...
                NotifyDescriptor.PLAIN_MESSAGE, // ... of a question type => a question mark icon
                null, // we have specified YES_NO_OPTION => can be null, options specified by L&F,
                // otherwise specify options as:
                //     new Object[] { NotifyDescriptor.YES_OPTION, ... etc. },
                NotifyDescriptor.OK_OPTION // default option is "Yes"
                );

        // let's display the dialog now...
        if (DialogDisplayer.getDefault().notify(nd) == NotifyDescriptor.OK_OPTION) {
            Properties props = getLookup().lookup(Properties.class);
            props.setProperty(
                    "massResolution", sp.getMassResolution());
            double[] masses = null;
            props.setProperty("selectedMasses", sp.getSelectedMasses());
            props.setProperty("plotMode", sp.getPlotMode());
            props.setProperty("rtAxisUnit", sp.getRTAxisTimeUnit());
            load();
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized ChromatogramViewTopComponent getDefault() {
        if (instance == null) {
            instance = new ChromatogramViewTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ChromatogramViewTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ChromatogramViewTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(
                PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ChromatogramViewTopComponent.class.getName()).
                    warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ChromatogramViewTopComponent) {
            return (ChromatogramViewTopComponent) win;
        }
        Logger.getLogger(ChromatogramViewTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public ChromMSHeatmapPanel getChromatogramPanel() {
        if (this.jp == null) {
            this.jp = new ChromMSHeatmapPanel(
                    new FileFragment(new File(getLookup().lookup(
                    IChromatogramDescriptor.class).getResourceLocation())));
            add(this.jp, BorderLayout.CENTER);
            ic.add(this.jp);
        }
        return this.jp;
    }

    public void setPanel() {
        final TopComponent tc = this;
        loading = false;
        Runnable r = new Runnable() {

            @Override
            public void run() {

//        add(jp, BorderLayout.CENTER);
                if (secondaryView != null) {
                    System.out.println("Setting ms data!");
                    secondaryView.setMSData(getChromatogramPanel().
                            getFileFragment(), getChromatogramPanel().
                            getChartPanelMouseListener());
                }
                requestActive();
                requestFocusInWindow(true);
            }
        };
        SwingUtilities.invokeLater(r);
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }
}
