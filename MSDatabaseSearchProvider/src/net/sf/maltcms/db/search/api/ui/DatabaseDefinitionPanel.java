/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DatabaseDefinitionPanel.java
 *
 * Created on 04.08.2011, 13:48:14
 */
package net.sf.maltcms.db.search.api.ui;

import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import net.sf.maltcms.chromaui.project.api.IChromAUIProject;
import net.sf.maltcms.chromaui.project.api.container.ADatabaseBackedContainer;
import net.sf.maltcms.chromaui.project.api.container.ContainerFactory;
import net.sf.maltcms.chromaui.project.api.descriptors.DescriptorFactory;
import net.sf.maltcms.chromaui.project.api.descriptors.IDatabaseDescriptor;
import net.sf.maltcms.chromaui.project.api.types.DatabaseType;
import net.sf.maltcms.chromaui.project.api.container.DatabaseContainer;

/**
 * TODO link with project so that dbs are stored and retrieved.
 * @author nilshoffmann
 */
public class DatabaseDefinitionPanel extends javax.swing.JPanel {

//    private HashSet<IDatabaseDescriptor> databaseFiles = new LinkedHashSet<IDatabaseDescriptor>();
    private final IChromAUIProject project;
    private DefaultListModel listModel;

    /** Creates new form DatabaseDefinitionPanel */
    public DatabaseDefinitionPanel(IChromAUIProject project) {
        initComponents();

        listModel = new DefaultListModel();
        if (project != null) {
            Collection<DatabaseContainer> databases = project.getContainer(
                    DatabaseContainer.class);
            for (DatabaseContainer container : databases) {
                for (IDatabaseDescriptor descr : container.get()) {
                    listModel.addElement(descr);
                }
            }
        }

        jList1.setModel(listModel);

        this.project = project;
    }

    public List<IDatabaseDescriptor> getSelectedDatabases() {
        Object[] descriptors = jList1.getSelectedValues();
        List<IDatabaseDescriptor> list = new ArrayList<IDatabaseDescriptor>();
        for (Object obj : descriptors) {
            list.add((IDatabaseDescriptor) obj);
        }
        return list;
    }

//    public List<IDatabaseDescriptor> getDatabaseFiles() {
//        List<IDatabaseDescriptor> descriptors = new LinkedList<IDatabaseDescriptor>();
//        DatabaseContainer dbcontainer = new DatabaseContainer();
//        for(File file:databaseFiles) {
//            IDatabaseDescriptor descriptor = DescriptorFactory.newDatabaseDescriptor(
//                    file.getAbsolutePath(), DatabaseType.USER);
//            descriptors.add(descriptor);    
//            dbcontainer.add(descriptor);
//            project.addContainer();
//        }
//        return descriptors;
//    }
    public double getMatchThreshold() {
        String str = minimumMatchScore.getText();
        if (str.isEmpty()) {
            minimumMatchScore.setText("0.6");
        }
        return Double.parseDouble(minimumMatchScore.getText());
    }

    public int getMaxNumberOfHits() {
        String str = maximumMatches.getText();
        if (str.isEmpty()) {
            maximumMatches.setText("1");
        }
        return Integer.parseInt(maximumMatches.getText());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        addDatabase = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        removeDatabase = new javax.swing.JButton();
        minimumMatchScore = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        maximumMatches = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        selectedDatabasesTextField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.jLabel1.text")); // NOI18N

        addDatabase.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.addDatabase.text")); // NOI18N
        addDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDatabaseActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        removeDatabase.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.removeDatabase.text")); // NOI18N

        minimumMatchScore.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.minimumMatchScore.text")); // NOI18N
        minimumMatchScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minimumMatchScoreActionPerformed(evt);
            }
        });

        jLabel2.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.jLabel2.text")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.jLabel3.text")); // NOI18N

        maximumMatches.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.maximumMatches.text")); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.jLabel4.text")); // NOI18N

        selectedDatabasesTextField.setEditable(false);
        selectedDatabasesTextField.setText(org.openide.util.NbBundle.getMessage(DatabaseDefinitionPanel.class, "DatabaseDefinitionPanel.selectedDatabasesTextField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(minimumMatchScore, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(maximumMatches, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                    .addComponent(selectedDatabasesTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 94, Short.MAX_VALUE)
                            .addComponent(removeDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 94, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(addDatabase))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeDatabase)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(minimumMatchScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maximumMatches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(4, 4, 4)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(selectedDatabasesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDatabaseActionPerformed
        JFileChooser jfc = new JFileChooser();
        FileFilter fileFilter = new FileFilter() {

            @Override
            public boolean accept(File file) {
                if (file.isDirectory()) {
                    return true;
                }
                if (file.getName().toLowerCase().endsWith("db4o")) {
                    return true;
                }
                return false;
            }

            @Override
            public String getDescription() {
                return ".db4o";
            }
        };
        jfc.setFileFilter(fileFilter);
        jfc.setMultiSelectionEnabled(true);
        int result = jfc.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File[] selectedDatabases = jfc.getSelectedFiles();
//            databaseFiles.addAll(Arrays.asList(selectedDatabases));
//            DefaultListModel dlm = new DefaultListModel();
            ADatabaseBackedContainer<IDatabaseDescriptor> dbContainer = ContainerFactory.
                    createDatabaseContainer();
            for (File file : selectedDatabases) {
                IDatabaseDescriptor descriptor = DescriptorFactory.
                        newDatabaseDescriptor(
                        file.getAbsolutePath(), DatabaseType.USER);
                if (!listModel.contains(descriptor)) {
                    listModel.addElement(descriptor);
                }
                dbContainer.add(descriptor);
            }
//          
            project.addContainer(dbContainer);

        }
    }//GEN-LAST:event_addDatabaseActionPerformed

    private void minimumMatchScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minimumMatchScoreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minimumMatchScoreActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        selectedDatabasesTextField.setText(
                "" + jList1.getSelectedValues().length);
    }//GEN-LAST:event_jList1ValueChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDatabase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField maximumMatches;
    private javax.swing.JTextField minimumMatchScore;
    private javax.swing.JButton removeDatabase;
    private javax.swing.JTextField selectedDatabasesTextField;
    // End of variables declaration//GEN-END:variables
}
