/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package maltcms.ui.nb.pipelineRunner.options;

import java.awt.Component;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import maltcms.ui.nb.pipelineRunner.ui.PipelineRunnerTopComponent;
import net.sf.maltcms.chromaui.project.api.IMaltcmsClassPathProvider;
import net.sf.maltcms.chromaui.ui.support.api.AProgressAwareRunnable;
import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.netbeans.api.options.OptionsDisplayer;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.util.Exceptions;
import org.openide.util.NbPreferences;

final class LocalMaltcmsExecutionPanel extends javax.swing.JPanel {

    private final LocalMaltcmsExecutionOptionsPanelController controller;
    private boolean formValid = false;
    private String maltcmsDownloadBase = "http://sourceforge.net/projects/maltcms/files/maltcms/maltcms-";

    LocalMaltcmsExecutionPanel(LocalMaltcmsExecutionOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        maltcmsInstallationPath = new javax.swing.JTextField();
        select = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        maltcmsVersion = new javax.swing.JTextField();
        commandLineOptions = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        download = new javax.swing.JButton();
        maltcmsOnlineVersion = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(LocalMaltcmsExecutionPanel.class, "LocalMaltcmsExecutionPanel.jLabel1.text")); // NOI18N

        maltcmsInstallationPath.setColumns(20);
        maltcmsInstallationPath.setText(org.openide.util.NbBundle.getMessage(LocalMaltcmsExecutionPanel.class, "LocalMaltcmsExecutionPanel.maltcmsInstallationPath.text")); // NOI18N
        maltcmsInstallationPath.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                maltcmsInstallationPathPropertyChange(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(select, org.openide.util.NbBundle.getMessage(LocalMaltcmsExecutionPanel.class, "LocalMaltcmsExecutionPanel.select.text")); // NOI18N
        select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(LocalMaltcmsExecutionPanel.class, "LocalMaltcmsExecutionPanel.jLabel2.text")); // NOI18N

        maltcmsVersion.setColumns(20);
        maltcmsVersion.setEditable(false);
        maltcmsVersion.setText(org.openide.util.NbBundle.getMessage(LocalMaltcmsExecutionPanel.class, "LocalMaltcmsExecutionPanel.maltcmsVersion.text")); // NOI18N

        commandLineOptions.setColumns(20);
        commandLineOptions.setText(org.openide.util.NbBundle.getMessage(LocalMaltcmsExecutionPanel.class, "LocalMaltcmsExecutionPanel.commandLineOptions.text")); // NOI18N
        commandLineOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandLineOptionsActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(LocalMaltcmsExecutionPanel.class, "LocalMaltcmsExecutionPanel.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(download, org.openide.util.NbBundle.getMessage(LocalMaltcmsExecutionPanel.class, "LocalMaltcmsExecutionPanel.download.text")); // NOI18N
        download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadActionPerformed(evt);
            }
        });

        maltcmsOnlineVersion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1.2.0", "1.1.0" }));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(LocalMaltcmsExecutionPanel.class, "LocalMaltcmsExecutionPanel.jLabel4.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maltcmsOnlineVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(download, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(maltcmsVersion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(maltcmsInstallationPath, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(commandLineOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(select, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator1))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {download, select});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {commandLineOptions, maltcmsInstallationPath, maltcmsOnlineVersion, maltcmsVersion});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(download)
                    .addComponent(maltcmsOnlineVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(maltcmsInstallationPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(select))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(maltcmsVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commandLineOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectActionPerformed
        FileChooserBuilder fcb = new FileChooserBuilder(LocalMaltcmsExecutionPanel.class);
        fcb.setFilesOnly(false);
        fcb.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File file) {
                if(file.isDirectory()) {
                    return true;
                }
                return file.getName().equals("maltcms.jar");
            }

            @Override
            public String getDescription() {
                return "maltcms.jar";
            }
        });
        fcb.setSelectionApprover(new FileChooserBuilder.SelectionApprover() {

            @Override
            public boolean approve(File[] files) {
//                boolean approve = false;
                for(File f:files) {
                    if(f.getName().equals("maltcms.jar")) {
                        return true;
                    }
                }
                return false;
            }
        });
        JFileChooser jfc = fcb.createFileChooser();
        if(!maltcmsInstallationPath.getText().isEmpty()){
            File basedir = new File(maltcmsInstallationPath.getText());
            jfc.setCurrentDirectory(basedir);
        }
        int ret = jfc.showOpenDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            File f = jfc.getSelectedFile();
            maltcmsInstallationPath.setText(f.getParent());
            checkVersion(f.getParentFile().getAbsolutePath());
            controller.changed();
        }
    }//GEN-LAST:event_selectActionPerformed

    private void maltcmsInstallationPathPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_maltcmsInstallationPathPropertyChange
        String propName = evt.getPropertyName();
        if (propName.equals("text")) {
            String value = (String) evt.getNewValue();
            checkVersion(value);
        }
    }//GEN-LAST:event_maltcmsInstallationPathPropertyChange

    private void commandLineOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandLineOptionsActionPerformed
        // TODO add your handling code here:
        controller.changed();
    }//GEN-LAST:event_commandLineOptionsActionPerformed

    private void downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadActionPerformed
        DownloadAndInstallTask dait = new DownloadAndInstallTask();
        DownloadAndInstallTask.createAndRun("Maltcms download and installation", dait);
    }//GEN-LAST:event_downloadActionPerformed

    private class DownloadAndInstallTask extends AProgressAwareRunnable {

        @Override
        public void run() {
            try {
                progressHandle.start();
                progressHandle.progress("Asking User for Download Location");
                setEnabled(false);
                for(Component c:getComponents()) {
                    c.setEnabled(false);
                }
                FileChooserBuilder fcb = new FileChooserBuilder(LocalMaltcmsExecutionPanel.class);
                fcb.setDirectoriesOnly(true);
                File targetDirectory = fcb.showSaveDialog();
                if(targetDirectory!=null) {
                    targetDirectory.mkdirs();
                    progressHandle.progress("Downloading Maltcms " + (String) maltcmsOnlineVersion.getSelectedItem());
                    String[] majorMinorMicro = ((String) maltcmsOnlineVersion.getSelectedItem()).split("\\.");
                    String maltcmsBasename = "maltcms-" + majorMinorMicro[0] + "." + majorMinorMicro[1] + "." + majorMinorMicro[2];
                    String filename = maltcmsBasename + "-bin.zip";
                    URL u = new URL(maltcmsDownloadBase + majorMinorMicro[0] + "." + majorMinorMicro[1] + "/" + filename);
                    File targetFile = new File(targetDirectory, filename);
                    FileUtils.copyURLToFile(u, targetFile);
                    progressHandle.progress("Extracting Maltcms " + (String) maltcmsOnlineVersion.getSelectedItem());
                    unzipArchive(targetFile, targetDirectory);
                    File maltcmsInstallationDir = new File(targetDirectory, maltcmsBasename);
                    progressHandle.progress("Setting Maltcms Installation Path");
                    maltcmsInstallationPath.setText(maltcmsInstallationDir.getAbsolutePath());
                    checkVersion(maltcmsInstallationDir.getAbsolutePath());
                    controller.changed();
                    store();
                }else{
                    System.out.println("Download location dialog cancelled by user!");
                }
                for(Component c:getComponents()) {
                    c.setEnabled(true);
                }
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            } finally {
                setEnabled(true);
                progressHandle.finish();
            }
        }
    }

    public void unzipArchive(File archive, File outputDir) {
        try {
            ZipFile zipfile = new ZipFile(archive);
            for (Enumeration e = zipfile.entries(); e.hasMoreElements();) {
                ZipEntry entry = (ZipEntry) e.nextElement();
                unzipEntry(zipfile, entry, outputDir);
            }
        } catch (Exception e) {
            Exceptions.printStackTrace(e);
        }
    }

    private void createDir(File dir) {
        if (dir.exists()) {
            return;
        }
        if (!dir.mkdirs()) {
            throw new RuntimeException("Can not create directory " + dir);
        }
    }

    private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }

        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }

        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));

        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }

    void load() {
        // TODO read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(LocalMaltcmsExecutionPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        maltcmsInstallationPath.setText(NbPreferences.forModule(PipelineRunnerTopComponent.class).get("maltcmsInstallationPath", ""));
        checkVersion(maltcmsInstallationPath.getText());
        commandLineOptions.setText(NbPreferences.forModule(PipelineRunnerTopComponent.class).get("commandLineOptions", ""));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
    }

    void store() {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(LocalMaltcmsExecutionPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        NbPreferences.forModule(PipelineRunnerTopComponent.class).put("maltcmsInstallationPath", maltcmsInstallationPath.getText());
        NbPreferences.forModule(PipelineRunnerTopComponent.class).put("commandLineOptions", commandLineOptions.getText().trim());
        NbPreferences.forModule(IMaltcmsClassPathProvider.class).put("classPathRoot", maltcmsInstallationPath.getText() + File.separator + "lib");
        NbPreferences.forModule(PipelineRunnerTopComponent.class).put("maltcmsVersion", maltcmsVersion.getText());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
    }

    public static String getVersion(String maltcmsPath) {
        File basedir = new File(maltcmsPath);
        File cfgdir = new File(basedir, "cfg");
        try {
            PropertiesConfiguration pc = new PropertiesConfiguration(new File(cfgdir, "application.properties"));
            return pc.getString("application.version", "NA");
        } catch (ConfigurationException ex) {
            Exceptions.printStackTrace(ex);
        }
        return "NA";
    }

    private void checkVersion(String maltcmsPath) {
        maltcmsVersion.setText(getVersion(maltcmsPath));
        maltcmsVersion.setEnabled(true);
        controller.changed();
    }

    boolean valid() {
        return true;
        // TODO check whether form is consistent and complete
//        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField commandLineOptions;
    private javax.swing.JButton download;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField maltcmsInstallationPath;
    private javax.swing.JComboBox maltcmsOnlineVersion;
    private javax.swing.JTextField maltcmsVersion;
    private javax.swing.JButton select;
    // End of variables declaration//GEN-END:variables
}
